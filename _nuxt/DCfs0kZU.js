import{a$ as f}from"#entry";const u=f.steam?.apiBase||"https://steam-api-profile-palomiku.netlify.app/api",i=`${u}/steam-user`,m=`${u}/steam-games`,d=`${u}/steam-achievements`;async function n(r){try{const a=await fetch(r,{method:"GET",headers:{Accept:"application/json"},cache:"no-cache"});if(!a.ok)throw new Error(`HTTP ${a.status}: ${a.statusText}`);return await a.json()}catch(a){const o=a instanceof Error?a.message:String(a);return console.error("[Steam] Fetch error:",o),null}}function g(r){return r<1?"< 1 小时":`${Math.round(r)} 小时`}function p(r){try{return new Date(r).toLocaleTimeString("zh-CN",{hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1})}catch{return r}}function y(r){try{return new Date(r).toLocaleString("zh-CN",{year:"numeric",month:"2-digit",day:"2-digit",hour:"2-digit",minute:"2-digit",second:"2-digit",hour12:!1})}catch{return r}}const A=()=>{const r=async()=>{const e=await n(i);return!e||!e.success?null:e.data?.user||null},a=async()=>{const e=await n(m);return!e||!e.success?null:e.data?.games||null},o=async()=>{const e=await n(d);return!e||!e.success?null:e.data?.achievements||null},l=async()=>{try{console.log("[Steam] Fetching data from three endpoints");const[e,t,s]=await Promise.all([n(i),n(m),n(d)]);return!e?.success||!t?.success?{success:!1,error:"Failed to fetch required Steam data",code:"FETCH_ERROR"}:{success:!0,data:{user:e.data?.user,games:t.data?.games,achievements:s?.data?.achievements},allMetadata:{user:e.metadata,games:t.metadata,achievements:s?.metadata}}}catch(e){const t=e instanceof Error?e.message:String(e);return console.error("[Steam] Fetch error:",t),{success:!1,error:`Fetch failed: ${t}`,code:"FETCH_ERROR"}}};return{fetchSteamData:l,fetchUserInfo:r,fetchGamesData:a,fetchAchievementsData:o,getRecentGames:async()=>{const e=await l();return!e.success||!e.data?.games?.recentGames?[]:e.data.games.recentGames.map(t=>({...t,playtimeForever:typeof t.playtimeForever=="number"?Math.round(t.playtimeForever):0,playtimeTwoWeeks:t.playtimeTwoWeeks?Math.round(t.playtimeTwoWeeks):0}))},getAllGamesSorted:async()=>{const e=await a();return e?.allGames?e.allGames.map(s=>({...s,playtimeForever:Math.round(s.playtimeForever/60),playtimeTwoWeeks:s.playtimeTwoWeeks?Math.round(s.playtimeTwoWeeks/60):0})).sort((s,c)=>c.playtimeForever-s.playtimeForever):[]},getAchievements:async()=>await o(),getUserInfo:async()=>{try{console.log("[Steam] Fetching user info only");const e=await n(i);return!e?.success||!e.data?.user?null:e.data.user}catch(e){return console.error("[Steam] Failed to fetch user info:",e),null}},getGameStats:async()=>{const e=await a();if(!e?.allGames)return null;const{totalCount:t}=e,s=e.allGames.reduce((c,h)=>c+Math.round(h.playtimeForever/60),0);return{totalCount:t,totalPlaytime:s,averagePlaytime:t>0?Math.round(s/t):0}},formatPlaytime:g,formatCacheTime:p,formatCacheDate:y}};export{g as a,p as f,A as u};
