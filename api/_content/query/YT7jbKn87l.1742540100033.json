{"_path":"/2024/10/shiroi-docker-deployment","_dir":"10","_draft":false,"_partial":false,"_locale":"","title":"GitHub Action构建Shiroi Docker镜像","description":"Mix-Space，它属于前后端分离博客系统，你可以把前端和后端分离部署在不同的地方，在之前你可以把前端部署在Vercel云函数上，达到缓解服务器压力和提升访问速度的效果。","date":"2024-10-21T11:24:26.000Z","categories":["技术探索"],"tags":["Mix-Space","Docker"],"readingTime":{"text":"10 min read","minutes":9.31,"time":558600,"words":1862},"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"前言"},"children":[{"type":"text","value":"前言"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Mix-Space，它属于前后端分离博客系统，你可以把前端和后端分离部署在不同的地方，在之前你可以把前端部署在Vercel云函数上，达到缓解服务器压力和提升访问速度的效果。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是随着Vercel调整Hobby免费套餐的额度，Vercel免费套餐已经越来越不够用了，这个时候我们可以通过Docker将Shiro部署到自己的服务器上来解决问题，但是我在使用Shiroi（Shiro的闭源捐赠版）的时候遇到了问题：原作者innei并没有提供它的可用Docker镜像。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样的话你就需要在自己服务器上对Shiroi进行构建，但是对于配置较低（低于2G内存）的云服务器来说这是比较困难的，基本上会导致服务器爆内存假死。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Innei给出的解决方案是使用Github Action完成构建，将构建后的产物直接推送到你的服务器上，达到缓解服务器压力的作用。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是这个方案在我看来存在以下局限性："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"需要你在服务器安装相关依赖：Node.js，PM2，Sharp，但是部分用户（比如我）使用的是1Panel管理服务器，不大想要在服务器安装额外依赖。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"输出目录被固定在了服务器的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"root"}]},{"type":"text","value":"目录，不好更改。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"你需要向GitHub仓库存储你的服务器登录信息，比如SSH密钥等。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"项目本身有回滚功能，但一般用户可能不需要此功能，也会占用大量的服务器空间。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"总之我是不大想要折腾这套方案，那么有啥更好的办法嘛？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"欸，你说Docker部署不就行了，虽然Innei没给你Docker镜像，但是我们可以自己造啊！"}]},{"type":"element","tag":"h2","props":{"id":"思路"},"children":[{"type":"text","value":"思路"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"我们当然不能直接在自己服务器上构建镜像，构建Docker镜像产生的资源占用并不会比直接构建站点静态文件要少。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"那我们可以把innei的思路拿过来用一下，用Github Action进行Docker镜像构建不就可以了？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"但是光构建也不行，你还需要找个地方把镜像放下来，而我也不想使用直接推送服务器的办法，这也需要在Github这里存储服务器登录信息，虽然是"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":"存储应该能保证安全性，但是谁又能说准这个事情呢？"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"而且部分用户服务器在国内，Github Action的主动推送速度也不见得一定多好。"}]},{"type":"element","tag":"h2","props":{"id":"选择"},"children":[{"type":"text","value":"选择"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"最后我的选择方案是使用Github Action进行构建，然后将镜像传到Github Packages，Github Packages默认会对私有库镜像进行私有，也保障镜像不会直接泄露。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"Docker 对镜像仓库的管理共分为 3 个层级，依次是命名空间 (namespace) 、镜像仓库 (repository) 和 标签 (tag)："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"命名空间以名称作为标识，一个命名空间可管理多个镜像仓库。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"镜像仓库通过名称标识，一个镜像仓库中可保存一个镜像（image）的多个版本。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"镜像版本通过标签进行区分。"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"基于以上层级关系，一个完整的镜像路径 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"{namespace}/{repository}:{tag}"}]},{"type":"text","value":" 可以唯一确定一个镜像。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建一个私有库（注意一定是私有仓库）并在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".github/workflows"}]},{"type":"text","value":"目录下新建yml工作流文件，填入如下内容："}]},{"type":"element","tag":"pre","props":{"code":"name: Docker\n\non:\n  push:\n    branches:\n      - main\n  schedule:\n     - cron: '0 3 * * *'\n\n  repository_dispatch:\n    types: [trigger-workflow]\n\npermissions: write-all\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  PNPM_VERSION: 9.x.x\n  HASH_FILE: build_hash\n\njobs:\n  prepare:\n    name: Prepare\n    runs-on: ubuntu-latest\n    if: ${{ github.event.head_commit.message != 'Update hash file' }}\n\n    outputs:\n      hash_content: ${{ steps.read_hash.outputs.hash_content }}\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Read HASH_FILE content\n        id: read_hash\n        run: |\n          content=$(cat ${{ env.HASH_FILE }}) || true\n          echo \"hash_content=$content\" >> \"$GITHUB_OUTPUT\"\n  check:\n    name: Check Should Rebuild\n    runs-on: ubuntu-latest\n    needs: prepare\n    outputs:\n      canceled: ${{ steps.use_content.outputs.canceled }}\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          repository: innei-dev/shiroi\n          token: ${{ secrets.GH_PAT }}\n          fetch-depth: 0\n          lfs: true\n\n      - name: Use content from prev job and compare\n        id: use_content\n        env:\n          FILE_HASH: ${{ needs.prepare.outputs.hash_content }}\n        run: |\n          file_hash=$FILE_HASH\n          current_hash=$(git rev-parse --short HEAD)\n          echo \"File Hash: $file_hash\"\n          echo \"Current Git Hash: $current_hash\"\n          if [ \"$file_hash\" == \"$current_hash\" ]; then\n            echo \"Hashes match. Stopping workflow.\"\n            echo \"canceled=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"Hashes do not match. Continuing workflow.\"\n          fi\n\n  build:\n    name: Build artifact\n    runs-on: ubuntu-latest\n    needs: check\n    if: ${{needs.check.outputs.canceled != 'true'}}\n\n    outputs:\n      sha_short: ${{ steps.store.outputs.sha_short }}\n      branch: ${{ steps.store.outputs.branch }}\n\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        repository: innei-dev/shiroi\n        token: ${{ secrets.GH_PAT }}\n        fetch-depth: 0\n        lfs: true\n\n    - name: Login to Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ghcr.io\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Build Docker Image\n      run: |\n        docker build -t ghcr.io/${{ secrets.DOCKER_NAMESPACE }}/shiroi:latest .\n\n    - name: Push Docker Image to Github\n      run: |\n        docker push ghcr.io/${{ secrets.DOCKER_NAMESPACE }}/shiroi:latest\n\n    - name: Store artifact commit version\n      shell: bash\n      id: store\n      run: |\n        sha_short=$(git rev-parse --short HEAD)\n        branch_name=$(git rev-parse --abbrev-ref HEAD)\n        echo \"sha_short=$sha_short\" >> \"$GITHUB_OUTPUT\"\n        echo \"branch=$branch_name\" >> \"$GITHUB_OUTPUT\"\n  store:\n    name: Store artifact commit version\n    runs-on: ubuntu-latest\n    needs: [build]\n    steps:\n\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Use outputs from build\n        env:\n          SHA_SHORT: ${{ needs.build.outputs.sha_short }}\n          BRANCH: ${{ needs.build.outputs.branch }}\n        run: |\n          echo \"SHA Short from build: $SHA_SHORT\"\n          echo \"Branch from build: $BRANCH\"\n      - name: Write hash to file\n        env:\n          SHA_SHORT: ${{ needs.build.outputs.sha_short }}\n\n        run: |\n          echo \"SHA_SHORT: $SHA_SHORT\"\n          echo $SHA_SHORT > ${{ env.HASH_FILE }}\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add ${{ env.HASH_FILE }}\n          git status\n          git commit -a -m \"Update hash file\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"name: Docker\n\non:\n  push:\n    branches:\n      - main\n  schedule:\n     - cron: '0 3 * * *'\n\n  repository_dispatch:\n    types: [trigger-workflow]\n\npermissions: write-all\nconcurrency:\n  group: ${{ github.workflow }}-${{ github.ref }}\n  cancel-in-progress: true\n\nenv:\n  PNPM_VERSION: 9.x.x\n  HASH_FILE: build_hash\n\njobs:\n  prepare:\n    name: Prepare\n    runs-on: ubuntu-latest\n    if: ${{ github.event.head_commit.message != 'Update hash file' }}\n\n    outputs:\n      hash_content: ${{ steps.read_hash.outputs.hash_content }}\n\n    steps:\n      - name: Checkout\n        uses: actions/checkout@v4\n      - name: Read HASH_FILE content\n        id: read_hash\n        run: |\n          content=$(cat ${{ env.HASH_FILE }}) || true\n          echo \"hash_content=$content\" >> \"$GITHUB_OUTPUT\"\n  check:\n    name: Check Should Rebuild\n    runs-on: ubuntu-latest\n    needs: prepare\n    outputs:\n      canceled: ${{ steps.use_content.outputs.canceled }}\n\n    steps:\n      - uses: actions/checkout@v4\n        with:\n          repository: innei-dev/shiroi\n          token: ${{ secrets.GH_PAT }}\n          fetch-depth: 0\n          lfs: true\n\n      - name: Use content from prev job and compare\n        id: use_content\n        env:\n          FILE_HASH: ${{ needs.prepare.outputs.hash_content }}\n        run: |\n          file_hash=$FILE_HASH\n          current_hash=$(git rev-parse --short HEAD)\n          echo \"File Hash: $file_hash\"\n          echo \"Current Git Hash: $current_hash\"\n          if [ \"$file_hash\" == \"$current_hash\" ]; then\n            echo \"Hashes match. Stopping workflow.\"\n            echo \"canceled=true\" >> $GITHUB_OUTPUT\n          else\n            echo \"Hashes do not match. Continuing workflow.\"\n          fi\n\n  build:\n    name: Build artifact\n    runs-on: ubuntu-latest\n    needs: check\n    if: ${{needs.check.outputs.canceled != 'true'}}\n\n    outputs:\n      sha_short: ${{ steps.store.outputs.sha_short }}\n      branch: ${{ steps.store.outputs.branch }}\n\n    steps:\n    - uses: actions/checkout@v4\n      with:\n        repository: innei-dev/shiroi\n        token: ${{ secrets.GH_PAT }}\n        fetch-depth: 0\n        lfs: true\n\n    - name: Login to Registry\n      uses: docker/login-action@v3\n      with:\n        registry: ghcr.io\n        username: ${{ github.actor }}\n        password: ${{ secrets.GITHUB_TOKEN }}\n\n    - name: Build Docker Image\n      run: |\n        docker build -t ghcr.io/${{ secrets.DOCKER_NAMESPACE }}/shiroi:latest .\n\n    - name: Push Docker Image to Github\n      run: |\n        docker push ghcr.io/${{ secrets.DOCKER_NAMESPACE }}/shiroi:latest\n\n    - name: Store artifact commit version\n      shell: bash\n      id: store\n      run: |\n        sha_short=$(git rev-parse --short HEAD)\n        branch_name=$(git rev-parse --abbrev-ref HEAD)\n        echo \"sha_short=$sha_short\" >> \"$GITHUB_OUTPUT\"\n        echo \"branch=$branch_name\" >> \"$GITHUB_OUTPUT\"\n  store:\n    name: Store artifact commit version\n    runs-on: ubuntu-latest\n    needs: [build]\n    steps:\n\n      - name: Checkout\n        uses: actions/checkout@v4\n        with:\n          persist-credentials: false\n          fetch-depth: 0\n\n      - name: Use outputs from build\n        env:\n          SHA_SHORT: ${{ needs.build.outputs.sha_short }}\n          BRANCH: ${{ needs.build.outputs.branch }}\n        run: |\n          echo \"SHA Short from build: $SHA_SHORT\"\n          echo \"Branch from build: $BRANCH\"\n      - name: Write hash to file\n        env:\n          SHA_SHORT: ${{ needs.build.outputs.sha_short }}\n\n        run: |\n          echo \"SHA_SHORT: $SHA_SHORT\"\n          echo $SHA_SHORT > ${{ env.HASH_FILE }}\n      - name: Commit files\n        run: |\n          git config --local user.email \"41898282+github-actions[bot]@users.noreply.github.com\"\n          git config --local user.name \"github-actions[bot]\"\n          git add ${{ env.HASH_FILE }}\n          git status\n          git commit -a -m \"Update hash file\"\n      - name: Push changes\n        uses: ad-m/github-push-action@master\n        with:\n          github_token: ${{ secrets.GITHUB_TOKEN }}\n          branch: ${{ github.ref }}\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样就可以实现简单的构建并上传Github Registry镜像，需要你在仓库的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":"设置中配置一个机密变量："}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GH_PAT"}]},{"type":"text","value":"：有权限访问Shiroi仓库的Github Access Token。"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"DOCKER_NAMESPACE"}]},{"type":"text","value":"：镜像的命名空间，其中不要有任何大写字符，为了好记和防冲突可能性尽量选择使用个人Github用户名的小写字符。"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"由于 GitHub action 的限制，当一个仓库在 3 个月内没有活动时，工作流会被禁用。\n@innei"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"所以我们采用innei的办法，每次构建结束后上传一个存储哈希值的文件，来保持仓库活动，而且在构建前对仓库哈希值进行对比，也不会出现重复构建的情况。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"参考上面修改环境"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"secret"}]},{"type":"text","value":"后，运行工作流（注意先开启你仓库设置中Github Action写入文件的权限），这样就会生成哈希值文件并且构建镜像了。"}]},{"type":"element","tag":"h2","props":{"id":"使用"},"children":[{"type":"text","value":"使用"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"保存工作流文件，等待运行完毕，你应该可以在仓库侧边"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Packages"}]},{"type":"text","value":"或者个人Github账号主页的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Package"}]},{"type":"text","value":"里找到镜像文件。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在你个人服务器上拉取镜像前，你需要先在你的服务器上配置Docker私有仓库，值得注意的是你的Gitea实例必须是HTTPS地址，不然Docker会拒绝拉取不安全的私有仓库。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在你的服务器上输入以下指令登录Github Resgistry私有仓库"}]},{"type":"element","tag":"pre","props":{"code":"docker login ghcr.io\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"docker login ghcr.io\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后会提示你输入账号和有访问权限的Github Access Token，确认登录后你就可以拉取你的私有仓库镜像了，如果你是使用的1Panel的话，可以在容器的仓库设置直接设置私有仓库。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"然后你也可以使用下面的compose文件进行配置安装Shiroi："}]},{"type":"element","tag":"pre","props":{"code":"services:\n  shiro:\n    container_name: Shiroi\n    image:\n    restart: always\n    environment:\n      - NEXT_SHARP_PATH=/usr/local/lib/node_modules/sharp\n      - NEXT_PUBLIC_API_URL=https://api.example.com/api/v2\n      - NEXT_PUBLIC_GATEWAY_URL=https://api.example.com\n    ports:\n      - 127.0.0.1:2323:2323\n    networks:\n      - 1panel-network\nnetworks:\n  1panel-network:\n    external: true\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"services:\n  shiro:\n    container_name: Shiroi\n    image:\n    restart: always\n    environment:\n      - NEXT_SHARP_PATH=/usr/local/lib/node_modules/sharp\n      - NEXT_PUBLIC_API_URL=https://api.example.com/api/v2\n      - NEXT_PUBLIC_GATEWAY_URL=https://api.example.com\n    ports:\n      - 127.0.0.1:2323:2323\n    networks:\n      - 1panel-network\nnetworks:\n  1panel-network:\n    external: true\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"image"}]},{"type":"text","value":"这里填写你在软件包仓库这里看到的容器镜像信息，当然这是适用于1Panel的，常规部署也可以用下面这个"}]},{"type":"element","tag":"pre","props":{"code":"services:\n  shiro:\n    container_name: Shiroi\n    image:\n    restart: always\n    environment:\n      - NEXT_SHARP_PATH=/usr/local/lib/node_modules/sharp\n      - NEXT_PUBLIC_API_URL=https://api.example.com/api/v2\n      - NEXT_PUBLIC_GATEWAY_URL=https://api.example.com\n    ports:\n      - 127.0.0.1:2323:2323\n    networks:\n      - mx-network\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"services:\n  shiro:\n    container_name: Shiroi\n    image:\n    restart: always\n    environment:\n      - NEXT_SHARP_PATH=/usr/local/lib/node_modules/sharp\n      - NEXT_PUBLIC_API_URL=https://api.example.com/api/v2\n      - NEXT_PUBLIC_GATEWAY_URL=https://api.example.com\n    ports:\n      - 127.0.0.1:2323:2323\n    networks:\n      - mx-network\n"}]}]},{"type":"element","tag":"h2","props":{"id":"后话"},"children":[{"type":"text","value":"后话"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"这样你就算是简单完成了，本文本质上偏专业系，而非喂饭文，如果有疑问可以评论区提问或者搭配搜索引擎食用本文。"}]}],"toc":{"title":"","searchDepth":4,"depth":4,"links":[{"id":"前言","depth":2,"text":"前言"},{"id":"思路","depth":2,"text":"思路"},{"id":"选择","depth":2,"text":"选择"},{"id":"使用","depth":2,"text":"使用"},{"id":"后话","depth":2,"text":"后话"}]}},"_type":"markdown","_id":"content:posts:2024:10:shiroi-docker-deployment.md","_source":"content","_file":"posts/2024/10/shiroi-docker-deployment.md","_stem":"posts/2024/10/shiroi-docker-deployment","_extension":"md","_original_dir":"/posts"}