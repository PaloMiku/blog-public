{"_path":"/2024/08/docker-deploy-outline","_dir":"08","_draft":false,"_partial":false,"_locale":"","title":"Docker部署Outline并使用Github作为OAuth服务","description":"手把手教你用Docker Compose搭建企业级知识库系统！从零开始部署Outline核心服务，搭配PostgreSQL和Redis黄金组合，通过Minio打造私有云存储。深度整合GitHub登录体系，揭秘生产级环境变量配置技巧，附带Nginx反向代理实战指南，让协作知识库安全落地。","date":"2024-08-07T11:24:26.000Z","updated":"2024-08-07T15:30:53.000Z","categories":["技术探索"],"tags":["Docker","Outline","部署服务"],"readingTime":{"text":"12 min read","minutes":11.89,"time":713400,"words":2378},"body":{"type":"root","children":[{"type":"element","tag":"h2","props":{"id":"准备"},"children":[{"type":"text","value":"准备"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"一台服务器（建议至少1c2g）并安装Docker和Docker Compose"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"一个域名，建议为顶级域名"}]}]},{"type":"element","tag":"h2","props":{"id":"服务"},"children":[{"type":"text","value":"服务"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Outline（本体）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"PostgreSQL（数据库）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Redis（缓存数据库）"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Minio（对象存储服务）"}]}]},{"type":"element","tag":"h2","props":{"id":"部署"},"children":[{"type":"text","value":"部署"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"请先安装Docker和Docker Compose服务，如果你安装1Panel作为服务器面板，那么已经自带了相关服务，部署分为三部分，第一部分部署Minio并设置文件对象存储服务，第二部分获取GitHub OAuth相关设置，第三部分部署Outline相关服务。"}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你也可以使用兼容AWS S3协议的对象存储服务作为Outline的对象存储，例如：CloudFlare R2，缤纷云，腾讯云OSS等"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"如果你使用了在线对象存储服务，则可跳过部署Minio，直接开始部署Outline。参考你的对象存储服务文档填写相关机密信息和Endpoint。"}]},{"type":"element","tag":"h3","props":{"id":"部署-minio"},"children":[{"type":"text","value":"部署 Minio"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"新建一个文件夹放入部署相关文件，比如"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/opt/Minio"}]},{"type":"text","value":"，使用以下命令新建相关文件夹并前往目录，然后新建相关文件。"}]},{"type":"element","tag":"pre","props":{"code":"mkdir /opt/Minio &amp;&amp; cd /opt/Minio\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"mkdir /opt/Minio &amp;&amp; cd /opt/Minio\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以下为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":"文件示例"}]},{"type":"element","tag":"pre","props":{"code":"version: 3\nservices:\n  minio:\n    image: ${DOCKER_MINIO_IMAGE_NAME}\n    env_file: ./.env # 指定环境变量文件\n    container_name: minio\n    ports:\n      - 9502:9000\n      - 9503:9001\n    restart: always\n    command: server /data --console-address :9000 --address :9001\n    environment:\n      MINIO_ROOT_USER: ${MINIO_ROOT_USER}\n      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}\n    logging:\n      options:\n        max-size: 5M\n        max-file: 10\n      driver: json-file\n    volumes:\n      - ./minio_data:/data\n    labels:\n      createdBy: Apps\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"version: 3\nservices:\n  minio:\n    image: ${DOCKER_MINIO_IMAGE_NAME}\n    env_file: ./.env # 指定环境变量文件\n    container_name: minio\n    ports:\n      - 9502:9000\n      - 9503:9001\n    restart: always\n    command: server /data --console-address :9000 --address :9001\n    environment:\n      MINIO_ROOT_USER: ${MINIO_ROOT_USER}\n      MINIO_ROOT_PASSWORD: ${MINIO_ROOT_PASSWORD}\n    logging:\n      options:\n        max-size: 5M\n        max-file: 10\n      driver: json-file\n    volumes:\n      - ./minio_data:/data\n    labels:\n      createdBy: Apps\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"你还需要在Minio放置Docker Compose文件的目录新建"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".env"}]},{"type":"text","value":"文件，并填入以下内容，其中相关账密信息建议自行修改提高安全性。"}]},{"type":"element","tag":"pre","props":{"code":"DOCKER_MINIO_IMAGE_NAME=minio/minio:RELEASE.2024-08-03T04-33-23Z.fips\nDOCKER_MINIO_ROOT_USER=admin\nDOCKER_MINIO_ROOT_PASSWORD=admin\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"DOCKER_MINIO_IMAGE_NAME=minio/minio:RELEASE.2024-08-03T04-33-23Z.fips\nDOCKER_MINIO_ROOT_USER=admin\nDOCKER_MINIO_ROOT_PASSWORD=admin\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"使用 Nginx 反向代理 minio 服务，其中 9502 端口为 minio 服务的 http 端口，9503 端口为 minio 服务的 API 端口。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"示例: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"localhost:9502"}]},{"type":"text","value":"-> "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"https://minio.example.com"}]},{"type":"text","value":" "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"localhost:9503"}]},{"type":"text","value":" -> "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"https://api-minio.example.com"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"部署完成后，请访问"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"https://minio.example.com"}]},{"type":"text","value":"，使用设定的用户名和密码登录。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"登录后，在设置中将"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Region"}]},{"type":"text","value":"设置为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"cn-1"}]},{"type":"text","value":"，并且在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Bucket"}]},{"type":"text","value":"中增加一个"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"bucket"}]},{"type":"text","value":"，命名为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"outline"}]},{"type":"text","value":"用于存储"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"outline"}]},{"type":"text","value":"的数据，并把访问权限设置为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"私有"}]},{"type":"text","value":"。"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"element","tag":"strong","props":{},"children":[{"type":"text","value":"可选操作"}]},{"type":"text","value":"："}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"在"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Bucket"}]},{"type":"text","value":"->"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"outline"}]},{"type":"text","value":"->"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Access"}]},{"type":"text","value":"->"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"User"}]},{"type":"text","value":"中增加一个用户，用于 outline 服务访问 minio 服务。"}]},{"type":"element","tag":"h3","props":{"id":"配置github-oauth"},"children":[{"type":"text","value":"配置GitHub OAuth"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"1.访问 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GitHub"}]},{"type":"text","value":" 并登录 2.进入"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"OAuth Apps"}]},{"type":"text","value":" 页面（也可以依次点击：右上角头像 - Settings - Developer Settings - OAuth Apps） 3.点击"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"New OAuth App"}]},{"type":"text","value":" 4.填写 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Register a new OAuth application"}]},{"type":"text","value":" 表单"}]},{"type":"element","tag":"ul","props":{},"children":[{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Application name: 可自行填写，例如 outline"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Homepage URL: 填写 Outline 的主页 URL"}]},{"type":"element","tag":"li","props":{},"children":[{"type":"text","value":"Authorization callback URL: 填写 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<Homepage URL>/auth/oidc.callback"}]},{"type":"text","value":"，其中 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"<Homepage URL>"}]},{"type":"text","value":" 需要替换为Outline 的主页 URL"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"5.点击 "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Register application"}]},{"type":"text","value":" 按钮，进入应用详情页面 6.点击"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"Generate a new client secret"}]},{"type":"text","value":"按钮 7.记下 Client ID 和 Client secret，后面填写环境变量用（注意 Client secret 仅在创建时显示一次，后续不可再查询；如不慎遗失，可以再次点击按钮重新创建一个）"}]},{"type":"element","tag":"h3","props":{"id":"部署outline"},"children":[{"type":"text","value":"部署Outline"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"跟Minio一样，新建一个文件夹放入部署相关文件，比如"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"/opt/Outline"}]},{"type":"text","value":"，使用以下命令新建相关文件夹并前往目录，然后新建相关文件。"}]},{"type":"element","tag":"pre","props":{"code":"mkdir /opt/Outline &amp;&amp; cd /opt/Outline\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"mkdir /opt/Outline &amp;&amp; cd /opt/Outline\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"以下为"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"docker-compose.yml"}]},{"type":"text","value":"文件示例"}]},{"type":"element","tag":"pre","props":{"code":"version: 3.8\nservices:\n  outline:\n    image: ${DOCKER_OUTLINE_IMAGE_NAME}\n    env_file: ./.env\n    ports:\n      - 9303:3000\n    container_name: outline\n    restart: always\n    networks:\n      - outline\n    extra_hosts:\n      - ${DOCKER_OUTLINE_HOSTNAME}:0.0.0.0\n    depends_on:\n      - postgres\n      - redis\n\n  redis:\n    image: ${DOCKER_REDIS_IMAGE_NAME}\n    env_file: ./.env\n    volumes:\n      - ./redis/redis.conf:/redis.conf # 配置文件持久化\n    container_name: ${DOCKER_REDIS_HOST}\n    restart: always\n    networks:\n      - outline\n    command: [redis-server, /redis.conf] # 启动命令\n\n  postgres:\n    image: ${DOCKER_POSTGRES_IMAGE_NAME}\n    env_file: ./.env\n    environment:\n      POSTGRES_DB: ${DOCKER_POSTGRES_DB}\n      POSTGRES_USER: ${DOCKER_POSTGRES_USER}\n      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD}\n    volumes:\n      - ./database-data:/var/lib/postgresql/data # 数据持久化\n    container_name: ${DOCKER_POSTGRES_HOST}\n    restart: always\n    networks:\n      - outline\n\nnetworks:\n  outline:\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"version: 3.8\nservices:\n  outline:\n    image: ${DOCKER_OUTLINE_IMAGE_NAME}\n    env_file: ./.env\n    ports:\n      - 9303:3000\n    container_name: outline\n    restart: always\n    networks:\n      - outline\n    extra_hosts:\n      - ${DOCKER_OUTLINE_HOSTNAME}:0.0.0.0\n    depends_on:\n      - postgres\n      - redis\n\n  redis:\n    image: ${DOCKER_REDIS_IMAGE_NAME}\n    env_file: ./.env\n    volumes:\n      - ./redis/redis.conf:/redis.conf # 配置文件持久化\n    container_name: ${DOCKER_REDIS_HOST}\n    restart: always\n    networks:\n      - outline\n    command: [redis-server, /redis.conf] # 启动命令\n\n  postgres:\n    image: ${DOCKER_POSTGRES_IMAGE_NAME}\n    env_file: ./.env\n    environment:\n      POSTGRES_DB: ${DOCKER_POSTGRES_DB}\n      POSTGRES_USER: ${DOCKER_POSTGRES_USER}\n      POSTGRES_PASSWORD: ${DOCKER_POSTGRES_PASSWORD}\n    volumes:\n      - ./database-data:/var/lib/postgresql/data # 数据持久化\n    container_name: ${DOCKER_POSTGRES_HOST}\n    restart: always\n    networks:\n      - outline\n\nnetworks:\n  outline:\n"}]}]},{"type":"element","tag":"blockquote","props":{},"children":[{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"下面配置请逐行详细阅读，并根据实际情况修改，注意相关拼写！"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"跟Minio一样，在放置Docker Compose文件的目录新建"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":".env"}]},{"type":"text","value":"文件，并复制填入以下内容："}]},{"type":"element","tag":"pre","props":{"code":"# 镜像设置\nDOCKER_OUTLINE_IMAGE_NAME=docker.getoutline.com/outlinewiki/outline:latest\nDOCKER_POSTGRES_IMAGE_NAME=postgres\nDOCKER_REDIS_IMAGE_NAME=redis\n\n# 容器名称\nDOCKER_REDIS_HOST=outline_redis\nDOCKER_POSTGRES_HOST=outline_postgres\n\n# postgres设置\nDOCKER_POSTGRES_USER=outline\nDOCKER_POSTGRES_PASSWORD=outline\nDOCKER_POSTGRES_DB=outline\n\n# GitHub OAuth设置，填写前面记下的信息\n\nGITHUB_CLIENT_ID=id\nGITHUB_CLIENT_SECRET=secret\n\n# Outline设置\nDOCKER_OUTLINE_HOSTNAME=docs.example.com # outline域名（需要自己使用Nginx反向代理）\n\n# –––––––––––––––– outline必需 –––––––––––––––-\n\nNODE_ENV=production\n\n# 生成一个十六进制编码的32字节随机密钥。你应该在终端使用 openssl rand -hex 32\n# 来生成一个随机值。\nSECRET_KEY=d8e45eahe5d298d976464888dea86c92b72dfa73aj8cb8903454205c02c732b3\n\n# 生成一个唯一的随机密钥。格式不重要，但你仍然可以使用\n# openssl rand -hex 32 在你的终端来产生这个。\nUTILS_SECRET=cf561a25absbd24c58e6d74edd726f60de11fd5c3fb8c289c725a48ab3b7b759\n\n# 对于生产环境，请将这些指向你的数据库，在开发中默认\n# 应该是开箱即用的。\nDATABASE_URL=postgres://${DOCKER_POSTGRES_USER}:${DOCKER_POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOST}:5432/${DOCKER_POSTGRES_DB}\nDATABASE_CONNECTION_POOL_MIN=\nDATABASE_CONNECTION_POOL_MAX=\n# 取消注释此项以禁用连接到Postgres的SSL\nPGSSLMODE=disable\n\n# 对于redis，你可以指定一个与ioredis兼容的url，像这样\nREDIS_URL=redis://${DOCKER_REDIS_HOST}:6379\n# 或者，如果你想提供额外的连接选项，\n# 使用一个base64编码的JSON连接选项对象。参考ioredis文档\n# 了解可用选项的列表。\n# 示例：使用Redis Sentinel来实现高可用性\n# {sentinels:[{host:sentinel-0,port:26379},{host:sentinel-1,port:26379}],name:mymaster}\n# REDIS_URL=ioredis://eyJzZW50aW5lbHMiOlt7Imhvc3QiOiJzZW50aW5lbC0wIiwicG9ydCI6MjYzNzl9LHsiaG9zdCI6InNlbnRpbmVsLTEiLCJwb3J0IjoyNjM3OX1dLCJuYW1lIjoibXltYXN0ZXIifQ==\n\n# URL应该指向完全合格的、公开可访问的URL。如果使用代理，\n# URL中的端口和PORT可能不同。\nURL=https://${DOCKER_OUTLINE_HOSTNAME}\nPORT=3000\n\n# 查看在运行一个独立的协作\n# 服务器的[文档](docs/SERVICES.md)，在正常操作中不需要设置这个。\n# COLLABORATION_URL=\n\n# 为了支持上传头像和文档附件的图片，必须提供\n# 一个兼容s3的存储。推荐使用AWS S3来实现冗余\n# 但如果你想保持所有文件存储在本地，可以使用\n# 例如minio (https://github.com/minio/minio) 的替代方案。\n\n# 设置S3的更详细指南可以在这里找到：\n# =&gt; https://wiki.generaloutline.com/share/125de1cc-9ff6-424b-8415-0d58c809a40f\n# 这里使用在minio部署时使用的用户名和密码，或者使用在上一节中可选操作中创建的用户，或者填写兼容AWS S3协议的对象存储信息\nAWS_ACCESS_KEY_ID=admin\nAWS_SECRET_ACCESS_KEY=admin\nAWS_REGION=cn-1\n# AWS_S3_ACCELERATE_URL=\nAWS_S3_UPLOAD_BUCKET_URL=https://api-minio.example.com\nAWS_S3_UPLOAD_BUCKET_NAME=outline\nAWS_S3_FORCE_PATH_STYLE=true\nAWS_S3_ACL=private\n\n# 指定要使用的存储系统。可能的值是s3或local之一。\n# 对于local，头像图片和文档附件将被保存在本地磁盘上。\nFILE_STORAGE=s3\n\n# 如果上面为FILE_STORAGE配置了local，则这设置了所有附件/图片的父目录\n# 确保该进程有权限创建\n# 这个路径，并且也有权限向其写入文件。\nFILE_STORAGE_LOCAL_ROOT_DIR=/var/lib/outline/data\n\n# 上传附件允许的最大大小。\nFILE_STORAGE_UPLOAD_MAX_SIZE=262144000\n\n# 覆盖文档导入的最大大小，通常这应该比文档附件的最大大小要低。\n# FILE_STORAGE_IMPORT_MAX_SIZE=\n\n# 覆盖工作区导入的最大大小，这些可能特别大\n# 并且文件是临时的，会在一段时间后自动删除。\n# FILE_STORAGE_WORKSPACE_IMPORT_MAX_SIZE=\n\n# –––––––––––––– 认证 ––––––––––––––\n\n# 第三方登录凭证，至少需要配置Google、Slack、\n# 或Microsoft中的一个才能进行工作安装，否则你将没有登录\n# 选项。\n\n# 要配置Slack认证，你需要在\n# =&gt; https://api.slack.com/apps\n# 创建一个应用程序\n#\n# 在配置Client ID时，添加一个重定向URL到OAuth &amp; Permissions：\n# https://&lt;URL&gt;/auth/slack.callback\n# SLACK_CLIENT_ID=从slack获取一个密钥\n# SLACK_CLIENT_SECRET=获取上面密钥的密钥\n\n# 要配置Google认证，你需要在\n# =&gt; https://console.cloud.google.com/apis/credentials\n# 创建一个OAuth客户端ID\n#\n# 在配置客户端ID时，添加一个已授权的重定向URI：\n# https://&lt;URL&gt;/auth/google.callback\n# GOOGLE_CLIENT_ID=\n# GOOGLE_CLIENT_SECRET=\n\n# 要配置Microsoft/Azure认证，你需要创建一个OAuth客户端。见\n# 指南了解如何设置你的Azure应用：\n# =&gt; https://wiki.generaloutline.com/share/dfa77e56-d4d2-4b51-8ff8-84ea6608faa4\n# AZURE_CLIENT_ID=\n# AZURE_CLIENT_SECRET=\n# AZURE_RESOURCE_APP_ID=\n\n# GitHub认证\n\n# 填写 GitHub OAuth application 的 Client ID 和 Client secret\nOIDC_CLIENT_ID=${GITHUB_CLIENT_ID}\nOIDC_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}\n\n# 填写 GitHub 的 OAuth endpoint，参考 https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow\nOIDC_AUTH_URI=https://github.com/login/oauth/authorize\nOIDC_TOKEN_URI=https://github.com/login/oauth/access_token\n\n# OAuth 授权的权限范围\nOIDC_SCOPES=read:user user:email\n\n# 通过 GitHub API 获取用户基本信息\nOIDC_USERINFO_URI=https://api.github.com/user\nOIDC_USERNAME_CLAIM=name\n\n# 让登录界面显示为“使用 GitHub 继续”\nOIDC_DISPLAY_NAME=GitHub\n\n# –––––––––––––––– 可选 ––––––––––––––––\n\n# 为HTTPS终止提供Base64编码的私钥和证书。仅当你不使用外部反向代理时才需要此项。见文档：\n# https://wiki.generaloutline.com/share/1c922644-40d8-41fe-98f9-df2b67239d45\n# SSL_KEY=\n# SSL_CERT=\n\n# 如果使用Cloudfront/Cloudflare分发或类似的服务，可以在下面设置。\n# 这将导致javascript、样式表和图像的路径被更新为\n# 在CDN_URL中定义的主机名。在CDN配置中，原始服务器\n# 应设置为与URL相同。\n# CDN_URL=\n\n# 在生产环境中自动重定向到https。默认值为true，但如果你能确保\n# SSL在外部负载均衡器处终止，可以设置为false。\nFORCE_HTTPS=false\n\n# 让安装通过发送匿名统计数据到\n# 维护者来检查更新\nENABLE_UPDATES=false\n\n# 应该启动多少个进程。作为一个合理的规则，将你服务器\n# 可用内存除以512来大致估算\nWEB_CONCURRENCY=1\n\n# 如果你的反向代理已经记录了传入的http\n# 请求，而这变得重复，你可以删除这一行\n# DEBUG=http\n\n# 配置服务器日志的最低严重性级别。应该是\n# error, warn, info, http, verbose, debug 和 silly 之一\nLOG_LEVEL=info\n\n# 为了完整的Slack集成，包括搜索和发布到频道，还需要\n# 以下配置，更多细节\n# =&gt; https://wiki.generaloutline.com/share/be25efd1-b3ef-4450-b8e5-c4a4fc11e02a\n#\n# SLACK_VERIFICATION_TOKEN=你的令牌\n# SLACK_APP_ID=A0XXXXXXX\n# SLACK_MESSAGE_ACTIONS=true\n\n# 可选地启用Sentry (sentry.io) 来跟踪错误和性能，\n# 并可选地在UI中添加一个Sentry代理隧道以绕过广告拦截器：\n# https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option)\n# SENTRY_DSN=\n# SENTRY_TUNNEL=\n\n# 为了支持发送出站的事务性电子邮件，如文档已更新或\n# 你被邀请了，你需要提供SMTP服务器的认证\n# SMTP_HOST=smtp.office365.com\n# SMTP_PORT=587\n# SMTP_USERNAME=\n# SMTP_PASSWORD=\n# SMTP_FROM_EMAIL=\n# SMTP_REPLY_EMAIL=\n# SMTP_TLS_CIPHERS=\n# SMTP_SECURE=false\n\n# 默认界面语言。见translate.getoutline.com查看\n# 可用的语言代码及其大致翻译的百分比。\nDEFAULT_LANGUAGE=zh_CN\n\n# 可选地启用应用程序Web服务器的速率限制器\nRATE_LIMITER_ENABLED=true\n\n# 为速率限制器配置默认的限流参数\nRATE_LIMITER_REQUESTS=1000\nRATE_LIMITER_DURATION_WINDOW=60\n\n# Iframely API配置\n# IFRAMELY_URL=\n# IFRAMELY_API_KEY=\n"},"children":[{"type":"element","tag":"code","props":{"__ignoreMap":""},"children":[{"type":"text","value":"# 镜像设置\nDOCKER_OUTLINE_IMAGE_NAME=docker.getoutline.com/outlinewiki/outline:latest\nDOCKER_POSTGRES_IMAGE_NAME=postgres\nDOCKER_REDIS_IMAGE_NAME=redis\n\n# 容器名称\nDOCKER_REDIS_HOST=outline_redis\nDOCKER_POSTGRES_HOST=outline_postgres\n\n# postgres设置\nDOCKER_POSTGRES_USER=outline\nDOCKER_POSTGRES_PASSWORD=outline\nDOCKER_POSTGRES_DB=outline\n\n# GitHub OAuth设置，填写前面记下的信息\n\nGITHUB_CLIENT_ID=id\nGITHUB_CLIENT_SECRET=secret\n\n# Outline设置\nDOCKER_OUTLINE_HOSTNAME=docs.example.com # outline域名（需要自己使用Nginx反向代理）\n\n# –––––––––––––––– outline必需 –––––––––––––––-\n\nNODE_ENV=production\n\n# 生成一个十六进制编码的32字节随机密钥。你应该在终端使用 openssl rand -hex 32\n# 来生成一个随机值。\nSECRET_KEY=d8e45eahe5d298d976464888dea86c92b72dfa73aj8cb8903454205c02c732b3\n\n# 生成一个唯一的随机密钥。格式不重要，但你仍然可以使用\n# openssl rand -hex 32 在你的终端来产生这个。\nUTILS_SECRET=cf561a25absbd24c58e6d74edd726f60de11fd5c3fb8c289c725a48ab3b7b759\n\n# 对于生产环境，请将这些指向你的数据库，在开发中默认\n# 应该是开箱即用的。\nDATABASE_URL=postgres://${DOCKER_POSTGRES_USER}:${DOCKER_POSTGRES_PASSWORD}@${DOCKER_POSTGRES_HOST}:5432/${DOCKER_POSTGRES_DB}\nDATABASE_CONNECTION_POOL_MIN=\nDATABASE_CONNECTION_POOL_MAX=\n# 取消注释此项以禁用连接到Postgres的SSL\nPGSSLMODE=disable\n\n# 对于redis，你可以指定一个与ioredis兼容的url，像这样\nREDIS_URL=redis://${DOCKER_REDIS_HOST}:6379\n# 或者，如果你想提供额外的连接选项，\n# 使用一个base64编码的JSON连接选项对象。参考ioredis文档\n# 了解可用选项的列表。\n# 示例：使用Redis Sentinel来实现高可用性\n# {sentinels:[{host:sentinel-0,port:26379},{host:sentinel-1,port:26379}],name:mymaster}\n# REDIS_URL=ioredis://eyJzZW50aW5lbHMiOlt7Imhvc3QiOiJzZW50aW5lbC0wIiwicG9ydCI6MjYzNzl9LHsiaG9zdCI6InNlbnRpbmVsLTEiLCJwb3J0IjoyNjM3OX1dLCJuYW1lIjoibXltYXN0ZXIifQ==\n\n# URL应该指向完全合格的、公开可访问的URL。如果使用代理，\n# URL中的端口和PORT可能不同。\nURL=https://${DOCKER_OUTLINE_HOSTNAME}\nPORT=3000\n\n# 查看在运行一个独立的协作\n# 服务器的[文档](docs/SERVICES.md)，在正常操作中不需要设置这个。\n# COLLABORATION_URL=\n\n# 为了支持上传头像和文档附件的图片，必须提供\n# 一个兼容s3的存储。推荐使用AWS S3来实现冗余\n# 但如果你想保持所有文件存储在本地，可以使用\n# 例如minio (https://github.com/minio/minio) 的替代方案。\n\n# 设置S3的更详细指南可以在这里找到：\n# =&gt; https://wiki.generaloutline.com/share/125de1cc-9ff6-424b-8415-0d58c809a40f\n# 这里使用在minio部署时使用的用户名和密码，或者使用在上一节中可选操作中创建的用户，或者填写兼容AWS S3协议的对象存储信息\nAWS_ACCESS_KEY_ID=admin\nAWS_SECRET_ACCESS_KEY=admin\nAWS_REGION=cn-1\n# AWS_S3_ACCELERATE_URL=\nAWS_S3_UPLOAD_BUCKET_URL=https://api-minio.example.com\nAWS_S3_UPLOAD_BUCKET_NAME=outline\nAWS_S3_FORCE_PATH_STYLE=true\nAWS_S3_ACL=private\n\n# 指定要使用的存储系统。可能的值是s3或local之一。\n# 对于local，头像图片和文档附件将被保存在本地磁盘上。\nFILE_STORAGE=s3\n\n# 如果上面为FILE_STORAGE配置了local，则这设置了所有附件/图片的父目录\n# 确保该进程有权限创建\n# 这个路径，并且也有权限向其写入文件。\nFILE_STORAGE_LOCAL_ROOT_DIR=/var/lib/outline/data\n\n# 上传附件允许的最大大小。\nFILE_STORAGE_UPLOAD_MAX_SIZE=262144000\n\n# 覆盖文档导入的最大大小，通常这应该比文档附件的最大大小要低。\n# FILE_STORAGE_IMPORT_MAX_SIZE=\n\n# 覆盖工作区导入的最大大小，这些可能特别大\n# 并且文件是临时的，会在一段时间后自动删除。\n# FILE_STORAGE_WORKSPACE_IMPORT_MAX_SIZE=\n\n# –––––––––––––– 认证 ––––––––––––––\n\n# 第三方登录凭证，至少需要配置Google、Slack、\n# 或Microsoft中的一个才能进行工作安装，否则你将没有登录\n# 选项。\n\n# 要配置Slack认证，你需要在\n# =&gt; https://api.slack.com/apps\n# 创建一个应用程序\n#\n# 在配置Client ID时，添加一个重定向URL到OAuth &amp; Permissions：\n# https://&lt;URL&gt;/auth/slack.callback\n# SLACK_CLIENT_ID=从slack获取一个密钥\n# SLACK_CLIENT_SECRET=获取上面密钥的密钥\n\n# 要配置Google认证，你需要在\n# =&gt; https://console.cloud.google.com/apis/credentials\n# 创建一个OAuth客户端ID\n#\n# 在配置客户端ID时，添加一个已授权的重定向URI：\n# https://&lt;URL&gt;/auth/google.callback\n# GOOGLE_CLIENT_ID=\n# GOOGLE_CLIENT_SECRET=\n\n# 要配置Microsoft/Azure认证，你需要创建一个OAuth客户端。见\n# 指南了解如何设置你的Azure应用：\n# =&gt; https://wiki.generaloutline.com/share/dfa77e56-d4d2-4b51-8ff8-84ea6608faa4\n# AZURE_CLIENT_ID=\n# AZURE_CLIENT_SECRET=\n# AZURE_RESOURCE_APP_ID=\n\n# GitHub认证\n\n# 填写 GitHub OAuth application 的 Client ID 和 Client secret\nOIDC_CLIENT_ID=${GITHUB_CLIENT_ID}\nOIDC_CLIENT_SECRET=${GITHUB_CLIENT_SECRET}\n\n# 填写 GitHub 的 OAuth endpoint，参考 https://docs.github.com/en/apps/oauth-apps/building-oauth-apps/authorizing-oauth-apps#web-application-flow\nOIDC_AUTH_URI=https://github.com/login/oauth/authorize\nOIDC_TOKEN_URI=https://github.com/login/oauth/access_token\n\n# OAuth 授权的权限范围\nOIDC_SCOPES=read:user user:email\n\n# 通过 GitHub API 获取用户基本信息\nOIDC_USERINFO_URI=https://api.github.com/user\nOIDC_USERNAME_CLAIM=name\n\n# 让登录界面显示为“使用 GitHub 继续”\nOIDC_DISPLAY_NAME=GitHub\n\n# –––––––––––––––– 可选 ––––––––––––––––\n\n# 为HTTPS终止提供Base64编码的私钥和证书。仅当你不使用外部反向代理时才需要此项。见文档：\n# https://wiki.generaloutline.com/share/1c922644-40d8-41fe-98f9-df2b67239d45\n# SSL_KEY=\n# SSL_CERT=\n\n# 如果使用Cloudfront/Cloudflare分发或类似的服务，可以在下面设置。\n# 这将导致javascript、样式表和图像的路径被更新为\n# 在CDN_URL中定义的主机名。在CDN配置中，原始服务器\n# 应设置为与URL相同。\n# CDN_URL=\n\n# 在生产环境中自动重定向到https。默认值为true，但如果你能确保\n# SSL在外部负载均衡器处终止，可以设置为false。\nFORCE_HTTPS=false\n\n# 让安装通过发送匿名统计数据到\n# 维护者来检查更新\nENABLE_UPDATES=false\n\n# 应该启动多少个进程。作为一个合理的规则，将你服务器\n# 可用内存除以512来大致估算\nWEB_CONCURRENCY=1\n\n# 如果你的反向代理已经记录了传入的http\n# 请求，而这变得重复，你可以删除这一行\n# DEBUG=http\n\n# 配置服务器日志的最低严重性级别。应该是\n# error, warn, info, http, verbose, debug 和 silly 之一\nLOG_LEVEL=info\n\n# 为了完整的Slack集成，包括搜索和发布到频道，还需要\n# 以下配置，更多细节\n# =&gt; https://wiki.generaloutline.com/share/be25efd1-b3ef-4450-b8e5-c4a4fc11e02a\n#\n# SLACK_VERIFICATION_TOKEN=你的令牌\n# SLACK_APP_ID=A0XXXXXXX\n# SLACK_MESSAGE_ACTIONS=true\n\n# 可选地启用Sentry (sentry.io) 来跟踪错误和性能，\n# 并可选地在UI中添加一个Sentry代理隧道以绕过广告拦截器：\n# https://docs.sentry.io/platforms/javascript/troubleshooting/#using-the-tunnel-option)\n# SENTRY_DSN=\n# SENTRY_TUNNEL=\n\n# 为了支持发送出站的事务性电子邮件，如文档已更新或\n# 你被邀请了，你需要提供SMTP服务器的认证\n# SMTP_HOST=smtp.office365.com\n# SMTP_PORT=587\n# SMTP_USERNAME=\n# SMTP_PASSWORD=\n# SMTP_FROM_EMAIL=\n# SMTP_REPLY_EMAIL=\n# SMTP_TLS_CIPHERS=\n# SMTP_SECURE=false\n\n# 默认界面语言。见translate.getoutline.com查看\n# 可用的语言代码及其大致翻译的百分比。\nDEFAULT_LANGUAGE=zh_CN\n\n# 可选地启用应用程序Web服务器的速率限制器\nRATE_LIMITER_ENABLED=true\n\n# 为速率限制器配置默认的限流参数\nRATE_LIMITER_REQUESTS=1000\nRATE_LIMITER_DURATION_WINDOW=60\n\n# Iframely API配置\n# IFRAMELY_URL=\n# IFRAMELY_API_KEY=\n"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"启动服务后，使用 Nginx 反向代理 Outline 服务，其中 9303 端口为 outline 服务的 http 端口"}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"示例: "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"localhost:9303"}]},{"type":"text","value":" -> "},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"https://docs.example.com"}]}]},{"type":"element","tag":"p","props":{},"children":[{"type":"text","value":"浏览器访问你部署的Outline主页（例如"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"https://docs.example.com"}]},{"type":"text","value":"），选择"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"使用GitHub登录"}]},{"type":"text","value":"，如果配置正确，会跳到GitHub的授权页面，使用你的"},{"type":"element","tag":"code","props":{"className":[]},"children":[{"type":"text","value":"GitHub"}]},{"type":"text","value":"相关信息授权登录即可。"}]}],"toc":{"title":"","searchDepth":4,"depth":4,"links":[{"id":"准备","depth":2,"text":"准备"},{"id":"服务","depth":2,"text":"服务"},{"id":"部署","depth":2,"text":"部署","children":[{"id":"部署-minio","depth":3,"text":"部署 Minio"},{"id":"配置github-oauth","depth":3,"text":"配置GitHub OAuth"},{"id":"部署outline","depth":3,"text":"部署Outline"}]}]}},"_type":"markdown","_id":"content:posts:2024:08:docker-deploy-outline.md","_source":"content","_file":"posts/2024/08/docker-deploy-outline.md","_stem":"posts/2024/08/docker-deploy-outline","_extension":"md","_original_dir":"/posts"}