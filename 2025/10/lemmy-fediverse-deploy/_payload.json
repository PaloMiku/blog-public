[{"data":1,"prerenderedAt":589},["ShallowReactive",2],{"/2025/10/lemmy-fediverse-deploy/":3,"surround-/2025/10/lemmy-fediverse-deploy":578},{"id":4,"title":5,"body":6,"categories":553,"date":555,"description":556,"draft":557,"extension":558,"image":559,"meta":560,"navigation":561,"path":562,"permalink":563,"readingTime":564,"recommend":569,"references":563,"seo":570,"sitemap":571,"stem":572,"tags":573,"type":576,"updated":563,"__hash__":577},"content/posts/2025/10/lemmy-fediverse-deploy.md","Lemmy 部署：Rust Fediverse 社区系统",{"type":7,"value":8,"toc":523},"minimark",[9,13,29,32,35,38,41,44,47,53,64,67,72,75,78,81,86,89,92,95,105,108,112,116,119,125,128,131,134,137,140,143,149,153,156,161,168,176,187,192,205,208,214,218,221,228,234,241,244,247,250,253,259,262,268,271,274,289,293,296,299,306,312,318,324,328,331,334,340,346,354,360,363,366,369,371,377,380,383,389,396,399,402,410,425,431,437,444,454,457,463,466,469,477,480,483,487,490,508,511,517,520],[10,11,12],"h2",{"id":12},"前言",[14,15,19,26],"alert",{":card":16,"card":17,"type":18},"true","","warning",[20,21,22],"template",{"v-slot:title":17},[23,24,25],"p",{},"注意！",[23,27,28],{},"考虑到目前个人的实际应用场景，本文仅为 Lemmy 的部署教程，个人暂未实际上线可用 Lemmy 公共实例。",[23,30,31],{},"最近个人打算补全 Fediverse 各种程序部署和配置教程，若对此类题材有兴趣欢迎持续订阅本博客。你可以通过 Folo 等 RSS 阅读器持续订阅本博客更新！",[23,33,34],{},"最近这两年个人社交的琢磨方向逐渐回到和倾向于 Fediverse 上，然后又恰逢个人最近了解到了 Rust 这门神奇的语言，上手使用后它安全而且占用小，确实“真香”了。",[23,36,37],{},"然后最近就在看把这俩结合起来的项目是什么样子的，于是 Lemmy 就进入了我的视野，它的定位更像是 Fediverse 版的 Reddit，如果你不了解 Reddit 是什么也没关系，我要是说百度贴吧，我相信你一定认识吧？Lemmy 整体就像是此类社区，用户在不同板块交流的社区。",[23,39,40],{},"在某个交流二次元的 Lemmy 实例中我简单上手使用和交流后感觉还是比较有趣的，不过整体来说 Lemmy 的圈子性更为偏一些，如果你没有足够的用户在某个大方向上，我不是很建议你选择部署它。",[23,42,43],{},"当然自部署 Fediverse 并非全是为了像建设传统社区一样给一堆人用，也有些人是为了把安全可用性和数据掌握在自己手中，总之如果你决定好了，那么你就可以跟随我的步伐，开始尝试部署 Lemmy 了。",[10,45,46],{"id":46},"介绍",[48,49,50],"blockquote",{},[23,51,52],{},"Lemmy是一个自托管的社交链接聚合与讨论平台。它完全是自由和开放的，不受任何公司控制。这意味着不会有广告、追踪或秘密算法。内容按社群进行组织，因此您可以轻松订阅感兴趣的话题，而忽略其他话题。通过赞踩将最有趣的条目推至顶部。",[23,54,55,56,63],{},"这是来自",[57,58,62],"a",{"href":59,"rel":60},"https://join-lemmy.org/",[61],"nofollow","官方网站","的中文介绍，好，过。",[23,65,66],{},"总之很多特性你都可以去找个实例注册体验一下或者部署好自己用，那才是真实体验，我们先简单说一下很多人关心的性能问题（来自官方部署文档）：",[48,68,69],{},[23,70,71],{},"在默认的 Docker 安装中，Lemmy 大约使用 150 MB 的 RAM。CPU 使用率可以忽略不计。",[23,73,74],{},"Rust 嘛，很正常，谁用谁知道（当然写那是另一码事了）。",[10,76,77],{"id":77},"安装和升级",[23,79,80],{},"没错，正如上面文档所言，Lemmy 默认且建议你使用 Docker 部署它，我其实也很认同这样部署，Rust 手动编译目前似乎在各个系统中的支持仍较玄学，所以如非必要，我也不建议使用 Rust 手动编译部署。",[82,83,85],"h3",{"id":84},"安装-docker","安装 Docker",[23,87,88],{},"那么首先我们安装 Docker，对于 Linux 用户，我们可以使用 Linuxmirrors 提供的更简单的一键安装 Docker 脚本（可自动判断系统和换源，甚至部分国产系统都可以装）。",[23,90,91],{},"什么？你是 Windows 或者想用图形化管理 Docker？Docker Desktop 欢迎你。",[23,93,94],{},"人嘛，总归是懒的，开源，社区证明的好用的项目为什么不用呢？哪怕是去 Docker 官网，你得到的推荐也是来自官方的兼容更少系统的 Docker 一键安装脚本。",[96,97,102],"pre",{"className":98,"code":100,"language":101,"meta":17},[99],"language-bash","bash \u003C(curl -sSL https://linuxmirrors.cn/docker.sh)\n","bash",[103,104,100],"code",{"__ignoreMap":17},[23,106,107],{},"等待 Docker 安装完成，我们就可以开始下一步了。",[82,109,111],{"id":110},"新建-lemmy-项目文件夹和下载配置文件","新建 Lemmy 项目文件夹和下载配置文件",[113,114,115],"h5",{"id":115},"新建文件夹",[23,117,118],{},"新建文件夹我相信你一定还是会的，不过该给指令咱还是要给的，能少打一个字是一个字😋",[96,120,123],{"className":121,"code":122,"language":101,"meta":17},[99],"mkdir lemmy\ncd lemmy\n",[103,124,122],{"__ignoreMap":17},[23,126,127],{},"接下来下载默认配置文件。",[23,129,130],{},"有人可能会问了：“为什么不给 Github 镜像下载链接？”",[23,132,133],{},"咱觉得吧，很少有纯国内服务器用户部署这种 Fediverse 服务还要大规模互联的吧:(",[23,135,136],{},"总之真有这需求可以自行转换解决。",[113,138,139],{"id":139},"下载配置文件",[23,141,142],{},"切换到 Lemmy 所在的目录并在终端执行：",[96,144,147],{"className":145,"code":146,"language":101,"meta":17},[99],"wget https://raw.githubusercontent.com/LemmyNet/lemmy-docs/main/assets/docker-compose.yml\nwget https://raw.githubusercontent.com/LemmyNet/lemmy-ansible/main/examples/config.hjson -O lemmy.hjson\nwget https://raw.githubusercontent.com/LemmyNet/lemmy-ansible/main/templates/nginx_internal.conf\nwget https://raw.githubusercontent.com/LemmyNet/lemmy-ansible/main/files/proxy_params\n",[103,148,146],{"__ignoreMap":17},[82,150,152],{"id":151},"下载安装启动","下载，安装，启动",[23,154,155],{},"随着时间的推移，本文提供的示例文件不一定是最新文件的样子，如果有变化并且你还不明白欢迎随时评论区提醒或咨询。",[157,158,160],"h4",{"id":159},"docker-编排文件","Docker 编排文件",[23,162,163,164,167],{},"首先咱打开 Lemmy 目录下的",[103,165,166],{"code":166},"docker-compose.yml","文件，大概应该是下面这个样子：",[96,169,174],{"className":170,"code":172,"language":173,"meta":17},[171],"language-yaml","x-logging: &default-logging\n  driver: \"json-file\"\n  options:\n    max-size: \"50m\"\n    max-file: \"4\"\n\nservices:\n  proxy:\n    image: nginx:1-alpine\n    ports:\n      # Listen for outside connections on port 10633. You can freely change the left-side\n      # number to a different port, eg using port 80 if you don't need a reverse proxy.\n      - \"10633:8536\"\n    volumes:\n      - ./nginx_internal.conf:/etc/nginx/nginx.conf:ro,Z\n      - ./proxy_params:/etc/nginx/proxy_params:ro,Z\n    restart: always\n    logging: *default-logging\n    depends_on:\n      - pictrs\n      - lemmy-ui\n\n  lemmy:\n    image: dessalines/lemmy:0.19.13\n    hostname: lemmy\n    restart: always\n    logging: *default-logging\n    environment:\n      - RUST_LOG=\"warn\"\n    volumes:\n      - ./lemmy.hjson:/config/config.hjson:Z\n    depends_on:\n      - postgres\n      - pictrs\n\n  lemmy-ui:\n    image: dessalines/lemmy-ui:0.19.13\n    environment:\n      - LEMMY_UI_LEMMY_INTERNAL_HOST=lemmy:8536\n      - LEMMY_UI_LEMMY_EXTERNAL_HOST={{ domain }}\n      - LEMMY_UI_HTTPS=true\n    volumes:\n      - ./volumes/lemmy-ui/extra_themes:/app/extra_themes\n    depends_on:\n      - lemmy\n    restart: always\n    logging: *default-logging\n\n  pictrs:\n    image: asonix/pictrs:0.5.19\n    # this needs to match the pictrs url in lemmy.hjson\n    hostname: pictrs\n    # we can set options to pictrs like this, here we set max. image size and forced format for conversion\n    # entrypoint: /sbin/tini -- /usr/local/bin/pict-rs -p /mnt -m 4 --image-format webp\n    environment:\n      - PICTRS_OPENTELEMETRY_URL=http://otel:4137\n      - PICTRS__SERVER__API_KEY={{ postgres_password }}\n      - RUST_BACKTRACE=full\n      - PICTRS__MEDIA__VIDEO__VIDEO_CODEC=vp9\n      - PICTRS__MEDIA__ANIMATION__MAX_WIDTH=256\n      - PICTRS__MEDIA__ANIMATION__MAX_HEIGHT=256\n      - PICTRS__MEDIA__ANIMATION__MAX_FRAME_COUNT=400\n    user: 991:991\n    volumes:\n      - ./volumes/pictrs:/mnt:Z\n    restart: always\n    logging: *default-logging\n\n  postgres:\n    image: pgautoupgrade/pgautoupgrade:18-alpine\n    hostname: postgres\n    environment:\n      - POSTGRES_USER=lemmy\n      - POSTGRES_PASSWORD={{ postgres_password }}\n      - POSTGRES_DB=lemmy\n    shm_size: 1g\n    volumes:\n      - ./volumes/postgres:/var/lib/postgresql/data:Z\n      - ./customPostgresql.conf:/etc/postgresql.conf\n    restart: always\n    logging: *default-logging\n\n  postfix:\n    image: mwader/postfix-relay\n    environment:\n      - POSTFIX_myhostname={{ domain }}\n    restart: \"always\"\n    logging: *default-logging\n\n","yaml",[103,175,172],{"__ignoreMap":17},[23,177,178,179,182,183,186],{},"别看这样一大堆，你要改的地方也很简单，主要是",[103,180,181],{"code":181},"{{ domain }}","和",[103,184,185],{"code":185},"{{ postgres_password }}","这俩东西。",[23,188,189,191],{},[103,190,181],{"code":181},"就是你 Lemmy 需要提供服务的域名，在部署 Fediverse 前首先就得需要有一个可以公网访问的域名，这是必须条件，而且以后这个域名都不能改了，所以请慎重决定。",[23,193,194,196,197,200,201,204],{},[103,195,185],{"code":185},"就是 PostgreSQL数据库的密码，也请慎重决定，一个安全的随机值可以保障你的服务数据库安全，请不要随便使用",[103,198,199],{"code":199},"123456","或者",[103,202,203],{"code":203},"lemmy","这样的密码摆烂，这是对你自己和你用户的数据安全不负责。",[23,206,207],{},"把以下内容删除，在下文我们自行配置邮箱服务。",[96,209,212],{"className":210,"code":211,"language":173,"meta":17},[171],"  postfix:\n    image: mwader/postfix-relay\n    environment:\n      - POSTFIX_myhostname={{ domain }}\n    restart: \"always\"\n    logging: *default-logging\n",[103,213,211],{"__ignoreMap":17},[157,215,217],{"id":216},"lemmy-主配置文件","Lemmy 主配置文件",[113,219,220],{"id":220},"基础配置",[23,222,223,224,227],{},"然后是 Lemmy 的主配置文件，我们打开",[103,225,226],{"code":226},"lemmy.hjson","这个文件，内容大致如下：",[96,229,232],{"className":230,"code":231,"language":173,"meta":17},[171],"{\n  database: {\n    host: postgres\n    password: \"{{ postgres_password }}\"\n    # Alternative way:\n    #uri: \"postgresql://lemmy:{{ postgres_password }}@postgres/lemmy\"\n  }\n  hostname: \"{{ domain }}\"\n  pictrs: {\n    url: \"http://pictrs:8080/\"\n    api_key: \"{{ postgres_password }}\"\n  }\n  email: {\n    smtp_server: \"postfix:25\"\n    smtp_from_address: \"noreply@{{ domain }}\"\n    tls_type: \"none\"\n  }\n}\n\n",[103,233,231],{"__ignoreMap":17},[23,235,236,182,238,240],{},[103,237,181],{"code":181},[103,239,185],{"code":185},"眼熟吧？把你在上面设置好的这俩变量填进去就行。",[23,242,243],{},"我们说点不一样的，邮箱配置。",[113,245,246],{"id":246},"发信邮箱配置",[23,248,249],{},"所谓邮箱配置就是 Lemmy 的通知发信邮箱配置，官方默认给的配置实在是太简单，是适用于服务器本身部署邮箱服务的方案，很显然不大适合大部分用户。",[23,251,252],{},"也就是上面配置文件中的这一段：",[96,254,257],{"className":255,"code":256,"language":173,"meta":17},[171],"  email: {\n    smtp_server: \"postfix:25\"\n    smtp_from_address: \"noreply@{{ domain }}\"\n    tls_type: \"none\"\n  }\n",[103,258,256],{"__ignoreMap":17},[23,260,261],{},"我们把他删掉，然后使用以下配置：",[96,263,266],{"className":264,"code":265,"language":173,"meta":17},[171],"# 邮件发送配置。除登录名/密码外，所有选项均为必填\nemail: {\n  # SMTP 服务器的主机名和端口\n  smtp_server: \"localhost:25\"\n\n  # 登录 SMTP 服务器的用户名\n  smtp_login: \"string\"\n\n  # 登录 SMTP 服务器的密码\n  smtp_password: \"string\"\n\n  # 发件地址，例如 \"noreply@your-instance.com\"\n  smtp_from_address: \"noreply@example.com\"\n\n  # SMTP 连接是否使用 TLS。可设为 none、tls 或 starttls\n  tls_type: \"none\"\n  }\n",[103,267,265],{"__ignoreMap":17},[23,269,270],{},"是不是瞬间直观了？我相信你基本能填明白。",[23,272,273],{},"认识不全也没关系，我们生活在一个互联网发达的时代，请使用你的搜索引擎搜索相关信息或者把本文此段内容复制然后去找 AI 问也行，只要你不随便直接复制粘贴到你自己站点上然后发出去说这文章是你自己的，本站不限制你复制任何内容。",[23,275,276,277,280,281,284,285,288],{},"我只说一点，如果你的发信服务商只提供了 465 端口连接方式，那么你除了上面主机名和端口写的是",[103,278,279],{"code":279},"服务商端口:465","以外，下面使用的",[103,282,283],{"code":283},"tls_type","填写",[103,286,287],{"code":287},"tls","。",[113,290,292],{"id":291},"lemmy-nginx-配置","Lemmy Nginx 配置",[23,294,295],{},"Lemmy 自身是用自带的 Nginx 容器把前后端混合起来合成一个端口提供给你服务的，所以你需要配置它，除非你想要使用其它的 Lemmy 前端，但这是进阶操作了，本文不会提供此内容。",[23,297,298],{},"在系列文末期个人会考虑补全 Lemmy 常用的更为进阶的玩法，也就是更换前端。",[23,300,301,302,305],{},"现在，请打开目录下的",[103,303,304],{"code":304},"nginx_internal.conf","文件，内容大概如下：",[96,307,310],{"className":308,"code":309,"language":173,"meta":17},[171],"worker_processes auto;\n\nevents {\n    worker_connections 1024;\n}\n\nhttp {\n    # Docker internal DNS IP so we always get the newer containers without having to \n    # restart/reload the docker container / nginx configuration\n    resolver {{ nginx_internal_resolver }} valid=5s;\n\n    # set the real_ip when from docker internal ranges. Ensuring our internal nginx\n    # container can always see the correct ips in the logs\n    set_real_ip_from 10.0.0.0/8;\n    set_real_ip_from 172.16.0.0/12;\n    set_real_ip_from 192.168.0.0/16;\n\n    # We construct a string consistent of the \"request method\" and \"http accept header\"\n    # and then apply soem ~simply regexp matches to that combination to decide on the\n    # HTTP upstream we should proxy the request to.\n    #\n    # Example strings:\n    #\n    #   \"GET:application/activity+json\"\n    #   \"GET:text/html\"\n    #   \"POST:application/activity+json\"\n    #\n    # You can see some basic match tests in this regex101 matching this configuration\n    # https://regex101.com/r/vwMJNc/1\n    #\n    # Learn more about nginx maps here http://nginx.org/en/docs/http/ngx_http_map_module.html\n    map \"$request_method:$http_accept\" $proxpass {\n        # If no explicit matches exists below, send traffic to lemmy-ui\n        default \"http://lemmy-ui:1234\";\n\n        # GET/HEAD requests that accepts ActivityPub or Linked Data JSON should go to lemmy.\n        #\n        # These requests are used by Mastodon and other fediverse instances to look up profile information,\n        # discover site information and so on.\n        \"~^(?:GET|HEAD):.*?application\\/(?:activity|ld)\\+json\" \"http://lemmy:8536\";\n\n        # All non-GET/HEAD requests should go to lemmy\n        #\n        # Rather than calling out POST, PUT, DELETE, PATCH, CONNECT and all the verbs manually\n        # we simply negate the GET|HEAD pattern from above and accept all possibly $http_accept values\n        \"~^(?!(GET|HEAD)).*:\" \"http://lemmy:8536\";\n    }\n\n    server {\n        set $lemmy_ui \"lemmy-ui:1234\";\n        set $lemmy \"lemmy:8536\";\n        # this is the port inside docker, not the public one yet\n        listen 1236;\n        listen 8536;\n\n        # change if needed, this is facing the public web\n        server_name localhost;\n        server_tokens off;\n\n        # Upload limit, relevant for pictrs\n        client_max_body_size 20M;\n\n        # Send actual client IP upstream\n        include proxy_params;\n\n        # frontend general requests\n        location / {\n            proxy_pass $proxpass;\n            rewrite ^(.+)/+$ $1 permanent;\n        }\n\n        # security.txt\n        location = /.well-known/security.txt {\n            proxy_pass \"http://$lemmy_ui\";\n        }\n\n        # backend\n        location ~ ^/(api|pictrs|feeds|nodeinfo|.well-known|version|sitemap.xml) {\n            proxy_pass \"http://$lemmy\";\n\n            # Send actual client IP upstream\n            include proxy_params;\n        }\n    }\n}\n\n",[103,311,309],{"__ignoreMap":17},[23,313,314,315,288],{},"看着这么一大串，实际上你只需要修改一个东西：",[103,316,317],{"code":317},"{{ nginx_internal_resolver }}",[23,319,320,321,288],{},"把它替换为 ",[103,322,323],{"code":323},"127.0.0.11",[113,325,327],{"id":326},"数据库调优进阶","数据库调优（进阶）",[23,329,330],{},"这里是一个比较进阶的步骤，我不会仔细讲它，因为这是对新手的一个挑战项，主要还是让阅读本文的进阶技术玩家们了解有这个选项的存在，让他们进行更好的性能追求。",[23,332,333],{},"如果你觉得你玩不明白这一步，请选择跳过这一步:(",[23,335,336,337],{},"使用如下指令下载 Lemmy 提供的 ",[103,338,339],{"code":339},"customPostgresql.conf",[96,341,344],{"className":342,"code":343,"language":101,"meta":17},[99],"wget https://raw.githubusercontent.com/LemmyNet/lemmy-ansible/main/examples/customPostgresql.conf\n",[103,345,343],{"__ignoreMap":17},[23,347,348,349,353],{},"接下来前往网站：",[57,350,351],{"href":351,"rel":352},"https://pgtune.leopard.in.ua/",[61]," ，填写你的设备或服务器配置，生成文件，然后覆盖掉里面类似下面这一段保存即可：",[96,355,358],{"className":356,"code":357,"language":173,"meta":17},[171],"# DB Version: 15\n# OS Type: linux\n# DB Type: web\n# Total Memory (RAM): 8 GB\n# CPUs num: 4\n# Data Storage: ssd\n\nmax_connections = 200\n# This needs to match your shm_size in docker-compose.yml\nshared_buffers = 2GB \neffective_cache_size = 6GB\nmaintenance_work_mem = 512MB\ncheckpoint_completion_target = 0.9\ncheckpoint_timeout = 86400\nwal_buffers = 16MB\ndefault_statistics_target = 100\nrandom_page_cost = 1.1\neffective_io_concurrency = 200\nwork_mem = 5242kB\nmin_wal_size = 1GB\nmax_wal_size = 30GB\nmax_worker_processes = 4\nmax_parallel_workers_per_gather = 2\nmax_parallel_workers = 4\nmax_parallel_maintenance_workers = 2\n",[103,359,357],{"__ignoreMap":17},[157,361,362],{"id":362},"文件夹权限配置",[23,364,365],{},"经过了漫长的配置文件修改步骤，我们终于来到下一步了（喜）",[23,367,368],{},"这一步很简单，为 pictrs 文件夹设置正确的权限。",[23,370,142],{},[96,372,375],{"className":373,"code":374,"language":101,"meta":17},[99],"mkdir -p volumes/pictrs\nsudo chown -R 991:991 volumes/pictrs\n",[103,376,374],{"__ignoreMap":17},[157,378,379],{"id":379},"启动编排",[23,381,382],{},"终于，我们完成了前面配置 Lemmy 本身的步骤，该启动编排了。",[96,384,387],{"className":385,"code":386,"language":101,"meta":17},[99],"docker compose up -d\n",[103,388,386],{"__ignoreMap":17},[23,390,391,392,395],{},"等待编排完成启动，你就可以在 ",[103,393,394],{"code":394},"http://localhost:{{ lemmy_port }}"," 访问到 Lemmy 了。",[157,397,398],{"id":398},"故障排除",[23,400,401],{},"个人启动的时候遇到了一个问题，出现报错：",[96,403,408],{"className":404,"code":406,"language":407,"meta":17},[405],"language-text","error response from daemon: failed to create task for container: failed to create shim task: OCI runtime create failed: runc create failed: unable to start container process: error during container init: error mounting \"/home/palomiku/Fediverse/Lemmy/volumes/postgres\" to rootfs at \"/var/lib/postgresql/data\": change mount propagation through procfd: open o_path procfd: open /var/lib/docker/overlay2/08cdf58059859f223d2c577d44b22a74ef0b5e908620fd89c05fae3e71879e3f/merged/var/lib/postgresql/data: no such file or directory: unknown\n","text",[103,409,406],{"__ignoreMap":17},[23,411,412,413,416,417,424],{},"原因是 Docker 在为 Lemmy 的 postgres 容器挂载本地目录 ",[103,414,415],{"code":415},"/home/palomiku/Fediverse/Lemmy/volumes/postgres"," 时，发现容器镜像里 ",[418,419,420,421],"strong",{},"根本不存在挂载点 ",[103,422,423],{"code":423},"/var/lib/postgresql/data","，于是 mount 失败，容器启动被中止。",[23,426,427,428,430],{},"我们回头看看 Lemmy 的 ",[103,429,166],{"code":166}," 编排文件中有关 PostgreSQL 的这一段：",[96,432,435],{"className":433,"code":434,"language":173,"meta":17},[171],"  postgres:\n    image: pgautoupgrade/pgautoupgrade:18-alpine\n    hostname: postgres\n    environment:\n      - POSTGRES_USER=lemmy\n      - POSTGRES_PASSWORD=0d000721\n      - POSTGRES_DB=lemmy\n    shm_size: 1g\n    volumes:\n      - ./volumes/postgres:/var/lib/postgresql/data\n      - ./customPostgresql.conf:/etc/postgresql.conf\n    restart: always\n    logging: *default-logging\n",[103,436,434],{"__ignoreMap":17},[23,438,439,440],{},"相关错误：",[57,441,442],{"href":442,"rel":443},"https://github.com/pgautoupgrade/docker-pgautoupgrade?tab=readme-ov-file#error-message-when-mounting-data-to-varlibpostgresqldata-on-postgres-v18",[61],[23,445,446,447,450,451,288],{},"想解决也很简单，把宿主机目录改挂到 ",[418,448,449],{},"真正的父目录"," ",[103,452,453],{"code":453},"/var/lib/postgresql",[23,455,456],{},"这段改成这样：",[96,458,461],{"className":459,"code":460,"language":173,"meta":17},[171],"volumes:\n  - ./volumes/postgres:/var/lib/postgresql\n",[103,462,460],{"__ignoreMap":17},[82,464,465],{"id":465},"配置反向代理",[23,467,468],{},"这一步实话说是简单又麻烦，你要是不懂，我建议你直接装个服务器面板配置反代或者复制修改以下内容去问 AI：",[96,470,475],{"className":471,"code":473,"language":474,"meta":17},[472],"language-markdown","在服务器使用 Caddy 或 Nginx 反代 10633 端口上的服务该怎么做，我的系统是 XXX\n","markdown",[103,476,473],{"__ignoreMap":17},[23,478,479],{},"我个人更推荐使用 Caddy，还能减少配置 SSL 证书的时间，多好:)",[23,481,482],{},"本文不赘述反向代理步骤。",[82,484,486],{"id":485},"升级-lemmy","升级 Lemmy",[23,488,489],{},"前往 Lemmy 官网或者 Github 了解最新版本号和相关信息。",[23,491,492,493,496,497,499,500,503,504,507],{},"如果你已经有一个运行的 ",[103,494,495],{"code":495},"Lemmy"," 实例，要更新到最新版本，通常更改 ",[103,498,166],{"code":166}," 中的版本号就足够了，例如将 ",[103,501,502],{"code":502},"dessalines/lemmy:0.19.4"," 改为 ",[103,505,506],{"code":506},"dessalines/lemmy:0.19.5"," 。如果需要额外的步骤，这些步骤会在相应的发布公告中解释。",[23,509,510],{},"更改配置文件中的版本号后，在 Lemmy 的目录下执行以下命令：",[96,512,515],{"className":513,"code":514,"language":101,"meta":17},[99],"docker compose pull\ndocker compose up -d\n",[103,516,514],{"__ignoreMap":17},[10,518,519],{"id":519},"完成",[23,521,522],{},"配置完反向代理访问域名，我们即可看到 Lemmy 的初始化页面。",{"title":17,"searchDepth":524,"depth":524,"links":525},4,[526,528,529,552],{"id":12,"depth":527,"text":12},2,{"id":46,"depth":527,"text":46},{"id":77,"depth":527,"text":77,"children":530},[531,533,538,550,551],{"id":84,"depth":532,"text":85},3,{"id":110,"depth":532,"text":111,"children":534},[535,537],{"id":115,"depth":536,"text":115},5,{"id":139,"depth":536,"text":139},{"id":151,"depth":532,"text":152,"children":539},[540,541,547,548,549],{"id":159,"depth":524,"text":160},{"id":216,"depth":524,"text":217,"children":542},[543,544,545,546],{"id":220,"depth":536,"text":220},{"id":246,"depth":536,"text":246},{"id":291,"depth":536,"text":292},{"id":326,"depth":536,"text":327},{"id":362,"depth":524,"text":362},{"id":379,"depth":524,"text":379},{"id":398,"depth":524,"text":398},{"id":465,"depth":532,"text":465},{"id":485,"depth":532,"text":486},{"id":519,"depth":527,"text":519},[554],"联邦宇宙","2025-10-22 06:00:00","本文介绍了如何以Docker方式自建Fediverse实例Lemmy：先装Docker，拉取官方compose文件，替换域名、数据库密码与邮箱参数；按需调优PostgreSQL，修正挂载路径，赋权pictrs目录；启动后用Caddy/Nginx反代10633端口即可上线。文末给出升级命令与故障排查示例，助你轻松拥有Rust驱动、150 MB内存占用、贴吧般的去中心化社区。",false,"md","https://join-lemmy.org/static/assets/images/main_screen_2.webp",{},true,"/2025/10/lemmy-fediverse-deploy",null,{"text":565,"minutes":566,"time":567,"words":568},"17 min read",16.63,997800,3326,6,{"title":5,"description":556},{"loc":562},"posts/2025/10/lemmy-fediverse-deploy",[574,575],"Fediverse","Website","tech","0wIkuz2oFN6tLE3eYg_EopJEQ7-aAJItwD-tgVWDx_4",[579,584],{"title":580,"path":581,"stem":582,"date":583,"type":576,"children":-1},"大盘鸡做 NAS？FnOS 个人 VPS 部署体验","/2025/10/fnos-vps-started","posts/2025/10/fnos-vps-started","2025-10-21 05:00:00",{"title":585,"path":586,"stem":587,"date":588,"type":576,"children":-1},"Affine 部署：自托管类 Notion 知识库系统","/2025/10/affine-deploy","posts/2025/10/affine-deploy","2025-10-23 05:00:00",1761902829235]