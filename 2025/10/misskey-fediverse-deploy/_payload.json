[{"data":1,"prerenderedAt":533},["ShallowReactive",2],{"/2025/10/misskey-fediverse-deploy/":3,"surround-/2025/10/misskey-fediverse-deploy":522},{"id":4,"title":5,"body":6,"categories":497,"date":499,"description":500,"draft":501,"extension":502,"image":503,"meta":504,"navigation":505,"path":506,"permalink":507,"readingTime":508,"recommend":513,"references":507,"seo":514,"sitemap":515,"stem":516,"tags":517,"type":520,"updated":507,"__hash__":521},"content/posts/2025/10/misskey-fediverse-deploy.md","Misskey 部署：新一代联邦星际微博平台",{"type":7,"value":8,"toc":463},"minimark",[9,13,17,20,23,26,33,36,51,54,58,61,64,74,77,80,84,87,98,102,105,111,118,122,133,141,155,162,172,176,180,183,189,192,198,202,213,218,221,229,233,238,244,247,269,275,281,284,287,290,296,300,303,309,312,315,321,325,328,334,337,340,346,350,357,363,367,370,377,383,387,394,400,404,407,413,417,424,430,433,436,439,445,448,454,457,460],[10,11,12],"h2",{"id":12},"前言",[14,15,16],"p",{},"我踏入联邦宇宙的第一个实例是 Misskey....的 Fork 版本 Firefish，这些年过去了，Firefish 已经停止维护，但 Misskey 仍在蓬勃发展，今天我们在这篇文章将详细讲解如何在一台服务器上全量部署 Misskey 和其配套服务。",[10,18,19],{"id":19},"准备",[14,21,22],{},"在部署 Misskey 前，你需要有一台性能强悍的服务器，虽然 Misskey 并不像 Mastodon 那么庞大，但依然需要你的服务器有较高的配置，个人建议至少 2c4g 起步。",[14,24,25],{},"你可以参见个人文章《自建一个 Fediverse 实例，我们需要准备什么？》，在此篇文章里个人从域名到服务器准备以及对象存储等全面详解了你应该为联邦宇宙实例做什么准备。",[27,28],"link-banner",{":description":29,"banner":30,"link":31,"title":32},"null","https://engagemedia.org/wp-content/uploads/2020/07/Fediverse-3D_logojpg.jpg","/2025/06/self-fediverse-prepare","自建一个 Fediverse 实例，我们需要准备什么？",[14,34,35],{},"在有一台合适的服务器和域名后，我们就可以开始安装 Misskey 的第一步了。",[37,38,42,48],"alert",{":card":39,"card":40,"type":41},"true","","warning",[43,44,45],"template",{"v-slot:title":40},[14,46,47],{},"注意！",[14,49,50],{},"域名一定要慎重决定，一旦你启动了实例，在此之后不要更改域名！",[14,52,53],{},"注意因为 Misskey 所使用的 ActivityPub 协议的特殊性，部署后不支持更换域名！所以选择域名一定要慎重选择。",[10,55,57],{"id":56},"安装-docker","安装 Docker",[14,59,60],{},"Misskey 官方推荐的部署方式是 Docker Compose，这需要我们在服务器上安装 Docker。",[14,62,63],{},"我们使用 Linuxmirrors 提供的 Docker 安装脚本来执行 Docker 的安装，它可以在多种 Linux 系统上安装 Docker。",[65,66,71],"pre",{"className":67,"code":69,"language":70,"meta":40},[68],"language-bash","bash \u003C(curl -sSL https://linuxmirrors.cn/docker.sh)\n","bash",[72,73,69],"code",{"__ignoreMap":40},[14,75,76],{},"在遵照脚本步骤完成安装 Docker 后，我们进行下一步操作。",[10,78,79],{"id":79},"安装反向代理服务",[81,82,83],"h3",{"id":83},"反向代理",[14,85,86],{},"在 Misskey 我个人是推荐使用 Caddy 这款 Web 服务器的，自身占用低且性能不错，而且它能够自动申请 https 证书，接入联邦宇宙是必须要有 https 协议的，所以你肯定是不能用 http 或者 ip 访问 Misskey 实例的，Caddy 就能帮助我们简化这个过程。",[14,88,89,90,97],{},"Caddy 的部署和安装可以参见",[91,92,96],"a",{"href":93,"rel":94},"https://caddyserver.com/docs/install",[95],"nofollow","官方文档","，我们在这里仅介绍 Debian/Ubuntu 环境下的安装和使用方式。",[81,99,101],{"id":100},"安装-caddy","安装 Caddy",[14,103,104],{},"使用以下命令在 Debian/Ubuntu 环境下一键安装和启动 Caddy 本身以及需求的组件以及配置 Caddy 官方软件包仓库（稳定版）：",[65,106,109],{"className":107,"code":108,"language":70,"meta":40},[68],"sudo apt install -y debian-keyring debian-archive-keyring apt-transport-https curl \ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/gpg.key' | sudo gpg --dearmor -o /usr/share/keyrings/caddy-stable-archive-keyring.gpg \ncurl -1sLf 'https://dl.cloudsmith.io/public/caddy/stable/debian.deb.txt' | sudo tee /etc/apt/sources.list.d/caddy-stable.list \nchmod o+r /usr/share/keyrings/caddy-stable-archive-keyring.gpg \nchmod o+r /etc/apt/sources.list.d/caddy-stable.list \nsudo apt update \nsudo apt install caddy\n",[72,110,108],{"__ignoreMap":40},[14,112,113,114,117],{},"执行此安装操作后，Caddy 将自动启动并作为名为 ",[72,115,116],{"code":116},"caddy"," 的 systemd 服务运行 Caddy。",[81,119,121],{"id":120},"配置-caddy-反向代理","配置 Caddy 反向代理",[14,123,124,125,128,129,132],{},"我们打开",[72,126,127],{"code":127},"/etc/caddy/","目录下的",[72,130,131],{"code":131},"Caddyfile","文件，在最下面首先添加如下配置：",[65,134,139],{"className":135,"code":137,"language":138,"meta":40},[136],"language-json","misskey.example.com {\n  reverse_proxy 127.0.0.1:3000\n  encode zstd gzip\n}\n","json",[72,140,137],{"__ignoreMap":40},[14,142,143,144,147,148,151,152,154],{},"这代表 Caddy 会反代",[72,145,146],{"code":146},"misskey.example.com","的请求，并把请求转发到在本地",[72,149,150],{"code":150},"3000","端口上暴露的服务，我们这篇教程会让 Misskey 在",[72,153,150],{"code":150},"端口上部署，如果你想要更换端口，那么在上面的配置文件和后面的配置文件中你都需要更换对应端口。",[14,156,157,158,161],{},"Caddy 支持通过配置文件启用 Zstandard和 Gzip 压缩功能，这是主流的两种压缩算法。我们只需要把",[72,159,160],{"code":160}," encode zstd gzip","加入域名配置文件下方即可，后续加入其他配置也是类似这样放置。",[14,163,164,165,167,168,171],{},"同样你也需要更换",[72,166,146],{"code":146},"为你实际想部署的域名，完成配置后，确保域名已经解析到服务器的前提下，使用",[72,169,170],{"code":170},"systemctl restart caddy","重启 Caddy 服务。",[10,173,175],{"id":174},"安装-misskey-服务","安装 Misskey 服务",[81,177,179],{"id":178},"获取-misskey-和初始化配置文件","获取 Misskey 和初始化配置文件",[14,181,182],{},"使用以下指令从 Github 获取 Misskey 仓库和相关文件，并进入 Misskey 文件夹",[65,184,187],{"className":185,"code":186,"language":70,"meta":40},[68],"git clone -b master https://github.com/misskey-dev/misskey.git\ncd misskey\n",[72,188,186],{"__ignoreMap":40},[14,190,191],{},"使用以下命令复制各种配置文件的示例到可编辑配置文件：",[65,193,196],{"className":194,"code":195,"language":70,"meta":40},[68],"cp .config/docker_example.yml .config/default.yml\ncp .config/docker_example.env .config/docker.env\ncp ./compose_example.yml ./compose.yml\n",[72,197,195],{"__ignoreMap":40},[81,199,201],{"id":200},"修改-misskey-配置文件","修改 Misskey 配置文件",[14,203,204,205,208,209,212],{},"进入 Misskey 目录下的",[72,206,207],{"code":207},".config","文件夹，首先打开",[72,210,211],{"code":211},"default.yml","，我们要进行 Misskey 配置文件各项配置的修改。",[214,215,217],"h4",{"id":216},"实例-url-配置","实例 URL 配置",[14,219,220],{},"首先我们需要编辑配置文件的 URL 设置，此处即为你的实例以后对外的 URL，所以再次重申一定要慎重决定，一旦你启动了实例，在此之后不要更改 URL 设置！",[65,222,227],{"className":223,"code":225,"language":226,"meta":40},[224],"language-yaml","# 最终用户看到的可访问 URL。\n# 你也可以通过环境变量来设置 URL。\nurl: https://misskey.example.com\n","yaml",[72,228,225],{"__ignoreMap":40},[214,230,232],{"id":231},"端口与-tls-设置","端口与 TLS 设置",[14,234,235,236],{},"在此处我们需要注意和上文我们预配置反向代理的时候要保持一个端口，此处即",[72,237,150],{"code":150},[65,239,242],{"className":240,"code":241,"language":226,"meta":40},[224],"# Misskey 服务器应监听的端口。\nport: 3000\n",[72,243,241],{"__ignoreMap":40},[214,245,246],{"id":246},"数据库设置",[14,248,249,250,253,254,257,258,261,262,265,266,268],{},"在此段我们要进行的是数据库连接信息设置，将",[72,251,252],{"code":252},"example-misskey-user","和",[72,255,256],{"code":256},"example-misskey-pass","更换为你想使用的账户和密码，如果你的数据库地址开启了 SSL 连接，还需要把",[72,259,260],{"code":260},"extra","下的",[72,263,264],{"code":264},"ssl","设为",[72,267,39],{"code":39},"，但我们默认使用的是 Docker Compose 的 PostgreSQL 数据库所以不需要开启 SSL。",[65,270,273],{"className":271,"code":272,"language":226,"meta":40},[224],"db:\n  host: db\n  port: 5432\n\n  # 数据库名称\n  # 你也可以通过环境变量来设置数据库名称。\n  db: misskey\n\n  # 认证信息\n  # 你也可以通过环境变量来设置用户名和密码。\n  user: example-misskey-user\n  pass: example-misskey-pass\n\n  # 是否禁用查询缓存\n  #disableCache: true\n\n  # 额外的连接选项\n  #extra:\n  #  ssl: true\n",[72,274,272],{"__ignoreMap":40},[14,276,277],{},[278,279,280],"strong",{},"dbReplications / dbSlaves（读写分离）",[14,282,283],{},"这是一个进阶玩法，适用于超大型实例，简单介绍就是把读，比如搜索，展示 Note 贴文等更多只需要读取的场景路由到只读副本上，可以有效减少主库压力。",[14,285,286],{},"小型实例基本用不到，等你用到它起码得万人以上实例才可能显出主库压力问题了，而且使用这个功能注定会有延迟，从库延迟 100~300 ms 很常见，例如刚发的 Note 可能瞬间在个人时间线里看不到，然后刷新一下又有了。",[14,288,289],{},"本文仅对此作解释。",[65,291,294],{"className":292,"code":293,"language":226,"meta":40},[224],"dbReplications: false\n\n# 你可以在这里配置任意数量的只读副本\n#dbSlaves:\n#  -\n#    host:\n#    port:\n#    db:\n#    user:\n#    pass:\n#  -\n#    host:\n#    port:\n#    db:\n#    user:\n#    pass:\n",[72,295,293],{"__ignoreMap":40},[214,297,299],{"id":298},"redis-数据库设置","Redis 数据库设置",[14,301,302],{},"Redis 作为内存数据库，在搜索查询还有投递等队列操作上都用得到，是必须配置的，如果你连接的外部带加密数据库或者服务器一个 Redis 提供给多个服务那么就需要详细配置它了，使用 Docker Compose 配置保持默认即可。",[65,304,307],{"className":305,"code":306,"language":226,"meta":40},[224],"redis:\n  host: redis\n  port: 6379\n  #family: 0  # 0=Both, 4=IPv4, 6=IPv6\n  #pass: example-pass\n  #prefix: example-prefix\n  db: 1\n",[72,308,306],{"__ignoreMap":40},[214,310,311],{"id":311},"全文搜索设置",[14,313,314],{},"得益于我在 Sharkey 实例运营上得到的宝贵经验，我们在此处选择 sqlPgroonga 作为数据库全文搜索引擎，它对中文在内的亚洲语言等全文搜索兼容性更好更快，而且不需要部署额外的搜索服务，本身就是在 PostgreSQL 服务上提供的额外支持，因此我们后续也需要在 Compose 文件上做一些小修改来让它使用 sqlPgroonga 作为数据库全文搜索。",[65,316,319],{"className":317,"code":318,"language":226,"meta":40},[224],"fulltextSearch:\n  provider: sqlPgroonga\n",[72,320,318],{"__ignoreMap":40},[214,322,324],{"id":323},"id-生成设置","ID 生成设置",[14,326,327],{},"这里你可以调整 Misskey 的 ID 生成算法，通常不需要修改它，但你依然可以根据个人调整它。",[65,329,332],{"className":330,"code":331,"language":226,"meta":40},[224],"\n# 可选算法：\n# aid   ... 最短，毫秒级\n# aidx  ... 毫秒级（默认推荐）\n# meid  ... 类似 Mongo ObjectID，毫秒级\n# ulid  ... 毫秒级，字典序友好\n# objectid ... 仅用于兼容旧实例\n\n# 实例一旦启动，切勿再修改此配置！\nid: 'aidx'\n",[72,333,331],{"__ignoreMap":40},[214,335,336],{"id":336},"其他设置",[14,338,339],{},"通常不需要修改它，我在这放一下带中文注释翻译的配置文件，你可以按需要修改它。",[65,341,344],{"className":342,"code":343,"language":226,"meta":40},[224],"\n# 是否禁用 HSTS（HTTP 严格传输安全）\n#disableHsts: true\n\n# Worker 进程数\n#clusterLimit: 1\n\n# 每个 worker 的并发任务数\n# deliverJobConcurrency: 128   # 投递（出站）任务并发\n# inboxJobConcurrency: 16      # 收件（入站）任务并发\n\n# 任务速率限制（每秒）\n# deliverJobPerSec: 128\n# inboxJobPerSec: 32\n\n# 任务最大重试次数\n# deliverJobMaxAttempts: 12\n# inboxJobMaxAttempts: 8\n\n# 对外发起请求时使用的 IP 协议族（ipv4、ipv6 或 dual）\n#outgoingAddressFamily: ipv4\n\n# HTTP/HTTPS 代理\n#proxy: http://127.0.0.1:3128 \n\n# 不走代理的直连白名单\nproxyBypassHosts:\n  - api.deepl.com\n  - api-free.deepl.com\n  - www.recaptcha.net\n  - hcaptcha.com\n  - challenges.cloudflare.com\n\n# SMTP/SMTPS 代理\n#proxySmtp: http://127.0.0.1:3128    # 使用 HTTP/1.1 CONNECT\n#proxySmtp: socks4://127.0.0.1:1080 # 使用 SOCKS4\n#proxySmtp: socks5://127.0.0.1:1080 # 使用 SOCKS5\n\n# 媒体代理（用于隐藏用户真实地址、缓存缩略图等）\n#mediaProxy: https://example.com/proxy \n\n# 出于安全考虑，默认禁止从私网地址上传附件。\n# 可通过以下设置放行，默认值为“未定义”。\n# 详见 12.90.0 (2021/09/04) 更新日志。\n#allowedPrivateNetworks: [\n#  '127.0.0.1/32'\n#]\n\n# 上传/下载文件大小限制（单位：字节）\n#maxFileSize: 262144000    # 约 250 MiB\n\n# 日志相关\n# logging:\n#   sql:\n#     # 是否在日志中输出 SQL 查询参数\n#     # 默认：false\n#     enableQueryParamLogging: false\n#     # 是否禁用 SQL 截断，设为 true 则输出完整 SQL 文本\n#     # 默认：false\n#     disableQueryTruncation: false\n",[72,345,343],{"__ignoreMap":40},[81,347,349],{"id":348},"docker-环境变量文件修改","Docker 环境变量文件修改",[14,351,352,353,356],{},"保存关闭上面的 Misskey 配置文件后，我们打开同目录的",[72,354,355],{"code":355},"docker.env","文件，这里将决定编排文件启动时的环境变量，一般只需要修改此处数据库的三段内容，和配置文件里配置的一模一样即可。",[65,358,361],{"className":359,"code":360,"language":226,"meta":40},[224],"# Misskey 设置\n# MISSKEY_URL=https://example.tld/ \n\n# 数据库设置\nPOSTGRES_PASSWORD=example-misskey-pass\n# DATABASE_PASSWORD=${POSTGRES_PASSWORD}\nPOSTGRES_USER=example-misskey-user\n# DATABASE_USER=${POSTGRES_USER}\nPOSTGRES_DB=misskey\n# DATABASE_DB=${POSTGRES_DB}\nDATABASE_URL=\"postgres://${POSTGRES_USER}:${POSTGRES_PASSWORD}@db:5432/${POSTGRES_DB}}\"\n",[72,362,360],{"__ignoreMap":40},[81,364,366],{"id":365},"docker-编排文件修改","Docker 编排文件修改",[14,368,369],{},"因为我们前面修改过数据库全文搜索引擎以及我们也需要做一些安全等修改需求，此处我们也需要对 Compose 编排文件做一些修改。",[14,371,372,373,376],{},"回到 Misskey 主目录，打开目录下的",[72,374,375],{"code":375},"compose.yml","，内容应该类似如下：",[65,378,381],{"className":379,"code":380,"language":226,"meta":40},[224],"services:\n  web:\n    build: .\n    restart: always\n    links:\n      - db\n      - redis\n#     - mcaptcha\n#     - meilisearch\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    ports:\n      - \"3000:3000\"\n    networks:\n      - internal_network\n      - external_network\n    # env_file:\n    #   - .config/docker.env\n    volumes:\n      - ./files:/misskey/files\n      - ./.config:/misskey/.config:ro\n\n  redis:\n    restart: always\n    image: redis:7-alpine\n    networks:\n      - internal_network\n    volumes:\n      - ./redis:/data\n    healthcheck:\n      test: \"redis-cli ping\"\n      interval: 5s\n      retries: 20\n\n  db:\n    restart: always\n    image: postgres:15-alpine\n    networks:\n      - internal_network\n    env_file:\n      - .config/docker.env\n    volumes:\n      - ./db:/var/lib/postgresql/data\n    healthcheck:\n      test: \"pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\"\n      interval: 5s\n      retries: 20\n\n#  mcaptcha:\n#    restart: always\n#    image: mcaptcha/mcaptcha:latest\n#    networks:\n#      internal_network:\n#      external_network:\n#        aliases:\n#          - localhost\n#    ports:\n#      - 7493:7493\n#    env_file:\n#      - .config/docker.env\n#    environment:\n#      PORT: 7493\n#      MCAPTCHA_redis_URL: \"redis://mcaptcha_redis/\"\n#    depends_on:\n#      db:\n#        condition: service_healthy\n#      mcaptcha_redis:\n#        condition: service_healthy\n#\n#  mcaptcha_redis:\n#    image: mcaptcha/cache:latest\n#    networks:\n#      - internal_network\n#    healthcheck:\n#      test: \"redis-cli ping\"\n#      interval: 5s\n#      retries: 20\n\n#  meilisearch:\n#    restart: always\n#    image: getmeili/meilisearch:v1.3.4\n#    environment:\n#      - MEILI_NO_ANALYTICS=true\n#      - MEILI_ENV=production\n#    env_file:\n#      - .config/meilisearch.env\n#    networks:\n#      - internal_network\n#    volumes:\n#      - ./meili_data:/meili_data\n\nnetworks:\n  internal_network:\n    internal: true\n  external_network:\n\n",[72,382,380],{"__ignoreMap":40},[214,384,386],{"id":385},"web-程序本体","Web 程序本体",[14,388,389,390,393],{},"我们需要修改容器对外暴露为",[72,391,392],{"code":392},"127.0.0.1:3000","使得 Misskey 仅对 Caddy 反向代理暴露端口，以及移除掉无用的配置，修改后的配置文件大概如下：",[65,395,398],{"className":396,"code":397,"language":226,"meta":40},[224],"  web:\n    build: .\n    restart: always\n    links:\n      - db\n      - redis\n    depends_on:\n      db:\n        condition: service_healthy\n      redis:\n        condition: service_healthy\n    ports:\n      - \"127.0.0.1:3000:3000\"\n    networks:\n      - internal_network\n      - external_network\n    volumes:\n      - ./files:/misskey/files\n      - ./.config:/misskey/.config:ro\n",[72,399,397],{"__ignoreMap":40},[214,401,403],{"id":402},"redis-数据库","Redis 数据库",[14,405,406],{},"此处无需修改，保持原配置即可。",[65,408,411],{"className":409,"code":410,"language":226,"meta":40},[224],"\n  redis:\n    restart: always\n    image: redis:7-alpine\n    networks:\n      - internal_network\n    volumes:\n      - ./redis:/data\n    healthcheck:\n      test: \"redis-cli ping\"\n      interval: 5s\n      retries: 20\n",[72,412,410],{"__ignoreMap":40},[214,414,416],{"id":415},"postgresql-数据库","PostgreSQL 数据库",[14,418,419,420,423],{},"我们需要把数据库镜像更换为",[72,421,422],{"code":422},"pgroonga","以让它支持 sqlPgroonga 全文搜索。",[65,425,428],{"className":426,"code":427,"language":226,"meta":40},[224],"  db:\n    restart: always\n    image: groonga/pgroonga:4.0.1-alpine-17\n    networks:\n      - internal_network\n    env_file:\n      - .config/docker.env\n    volumes:\n      - ./db:/var/lib/postgresql/data\n    healthcheck:\n      test: \"pg_isready -U $$POSTGRES_USER -d $$POSTGRES_DB\"\n      interval: 5s\n      retries: 20\n",[72,429,427],{"__ignoreMap":40},[14,431,432],{},"保存关闭退出，我们就完成了 Docker Compose 的相关配置了，该准备启动编排了。",[81,434,435],{"id":435},"构建和初始化",[14,437,438],{},"执行以下命令进行 Misskey 镜像构建和数据库初始化，需要等待一段时间完成。",[65,440,443],{"className":441,"code":442,"language":70,"meta":40},[68],"sudo docker compose build\nsudo docker compose run --rm web pnpm run init\n",[72,444,442],{"__ignoreMap":40},[81,446,447],{"id":447},"启动编排",[65,449,452],{"className":450,"code":451,"language":70,"meta":40},[68],"sudo docker compose up -d\n",[72,453,451],{"__ignoreMap":40},[10,455,456],{"id":456},"完成",[14,458,459],{},"在编排启动后，如果你的域名和服务器 Caddy 配置正确，你应该就可以在你设置的域名上看到 Misskey 的初始化页面了！",[14,461,462],{},"🎉恭喜你完成了 Misskey 的基本全量部署！",{"title":40,"searchDepth":464,"depth":464,"links":465},4,[466,468,469,470,476,496],{"id":12,"depth":467,"text":12},2,{"id":19,"depth":467,"text":19},{"id":56,"depth":467,"text":57},{"id":79,"depth":467,"text":79,"children":471},[472,474,475],{"id":83,"depth":473,"text":83},3,{"id":100,"depth":473,"text":101},{"id":120,"depth":473,"text":121},{"id":174,"depth":467,"text":175,"children":477},[478,479,488,489,494,495],{"id":178,"depth":473,"text":179},{"id":200,"depth":473,"text":201,"children":480},[481,482,483,484,485,486,487],{"id":216,"depth":464,"text":217},{"id":231,"depth":464,"text":232},{"id":246,"depth":464,"text":246},{"id":298,"depth":464,"text":299},{"id":311,"depth":464,"text":311},{"id":323,"depth":464,"text":324},{"id":336,"depth":464,"text":336},{"id":348,"depth":473,"text":349},{"id":365,"depth":473,"text":366,"children":490},[491,492,493],{"id":385,"depth":464,"text":386},{"id":402,"depth":464,"text":403},{"id":415,"depth":464,"text":416},{"id":435,"depth":473,"text":435},{"id":447,"depth":473,"text":447},{"id":456,"depth":467,"text":456},[498],"联邦宇宙","2025-10-24 05:00:00","本文介绍了如何在单台服务器上全量部署联邦宇宙社交平台 Misskey 及其配套组件。文章从准备阶段开始，建议使用至少 2 核 4G 的服务器，并强调部署后不可更换域名。接着详细说明了安装 Docker、Caddy 反向代理的步骤，包括自动 HTTPS 证书的申请与配置。然后逐步指导获取 Misskey 源码、配置数据库（PostgreSQL 与 Redis）、设置全文搜索（使用 sqlPgroonga）以及调整 Docker Compose 文件。最后，通过构建镜像、初始化数据库并启动容器，完成 Misskey 的部署，用户可通过域名访问初始化页面。",false,"md","https://misskey-hub.net/img/hero/ss/tl.light.webp",{},true,"/2025/10/misskey-fediverse-deploy",null,{"text":509,"minutes":510,"time":511,"words":512},"15 min read",14.37,862200,2874,6,{"title":5,"description":500},{"loc":506},"posts/2025/10/misskey-fediverse-deploy",[518,519],"Fediverse","Website","tech","NRnLCTfhZX4SEDjEeJSEYoX64fXeQmL4AvpuxW-veS4",[523,528],{"title":524,"path":525,"stem":526,"date":527,"type":520,"children":-1},"Affine 部署：自托管类 Notion 知识库系统","/2025/10/affine-deploy","posts/2025/10/affine-deploy","2025-10-23 05:00:00",{"title":529,"path":530,"stem":531,"date":532,"type":520,"children":-1},"OtterWiki 部署：基于 Python 的轻量知识库系统","/2025/10/otterwiki-deploy","posts/2025/10/otterwiki-deploy","2025-10-24 22:00:00",1761868721231]